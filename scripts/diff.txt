diff --git a/.github/workflows/code-quality.yml b/.github/workflows/code-quality.yml
index e5d28f5..3248304 100644
--- a/.github/workflows/code-quality.yml
+++ b/.github/workflows/code-quality.yml
@@ -120,24 +120,24 @@ jobs:
             const complexity = JSON.parse(fs.readFileSync('complexity-report.json', 'utf8'));
             const sloc = JSON.parse(fs.readFileSync('sloc-report.json', 'utf8'));
             
-            console.log('üìä M√©tricas de C√≥digo:');
-            console.log('- Total de linhas:', sloc.total);
-            console.log('- Linhas de c√≥digo:', sloc.sloc);
-            console.log('- Complexidade m√©dia:', complexity.summary.average.cyclomatic.toFixed(2));
+            
+            
+            
+            );
             
             const highComplexityFunctions = complexity.functions.filter(f => f.cyclomatic > 10);
             if (highComplexityFunctions.length > 0) {
-              console.log('‚ö†Ô∏è Fun√ß√µes com alta complexidade (>10):');
+              :');
               highComplexityFunctions.forEach(f => {
-                console.log(\`  - \${f.name}: \${f.cyclomatic}\`);
+                
               });
               if (highComplexityFunctions.length > 5) {
-                console.log('‚ùå Muitas fun√ß√µes com alta complexidade');
+                
                 process.exit(1);
               }
             }
             
-            console.log('‚úÖ An√°lise de complexidade conclu√≠da');
+            
           "
 
   build-check:
diff --git a/index.html b/index.html
index d2c3dd5..5c9094d 100644
--- a/index.html
+++ b/index.html
@@ -2,11 +2,32 @@
 <html lang="pt-BR" class="dark">
   <head>
     <meta charset="UTF-8" />
-    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
+    
+    <!-- Favicons -->
+    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
+    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
+    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
+    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
+    
+    <!-- PWA -->
+    <link rel="manifest" href="/manifest.json" />
+    
     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
-    <meta name="description" content="Houer Frontend - Aplica√ß√£o moderna com React 19" />
+    <meta name="description" content="Houer - Sistema de gest√£o escolar moderno" />
     <meta name="theme-color" content="#0ea5e9" />
     
+    <!-- Open Graph / Facebook -->
+    <meta property="og:type" content="website" />
+    <meta property="og:title" content="Houer" />
+    <meta property="og:description" content="Sistema de gest√£o escolar moderno" />
+    <meta property="og:image" content="/android-chrome-512x512.png" />
+    
+    <!-- Twitter -->
+    <meta name="twitter:card" content="summary_large_image" />
+    <meta name="twitter:title" content="Houer" />
+    <meta name="twitter:description" content="Sistema de gest√£o escolar moderno" />
+    <meta name="twitter:image" content="/android-chrome-512x512.png" />
+    
     <!-- Preload critical fonts -->
     <link rel="preconnect" href="https://fonts.googleapis.com" />
     <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
@@ -24,7 +45,7 @@
       }
     </script>
     
-    <title>Houer Frontend</title>
+    <title>Houer - Sistema Escolar</title>
   </head>
   <body class="bg-gray-900 text-white antialiased">
     <div id="root"></div>
diff --git a/src/components/ErrorBoundary/ErrorBoundaryUI.tsx b/src/components/ErrorBoundary/ErrorBoundaryUI.tsx
index 1828658..d1c0c03 100644
--- a/src/components/ErrorBoundary/ErrorBoundaryUI.tsx
+++ b/src/components/ErrorBoundary/ErrorBoundaryUI.tsx
@@ -14,7 +14,6 @@ import {
 } from '@mui/icons-material'
 import { motion } from 'framer-motion'
 
-// === PROPS DO COMPONENTE UI ===
 interface ErrorBoundaryUIProps {
   error: Error | null
   eventId: string | null
@@ -23,7 +22,6 @@ interface ErrorBoundaryUIProps {
   onReportBug: () => void
 }
 
-// === COMPONENTE DE UI DO ERROR BOUNDARY ===
 export const ErrorBoundaryUI: React.FC<ErrorBoundaryUIProps> = ({
   error,
   eventId,
diff --git a/src/components/ErrorBoundary/ErrorDetailsExtractor.ts b/src/components/ErrorBoundary/ErrorDetailsExtractor.ts
index ec43422..e68f3af 100644
--- a/src/components/ErrorBoundary/ErrorDetailsExtractor.ts
+++ b/src/components/ErrorBoundary/ErrorDetailsExtractor.ts
@@ -1,4 +1,4 @@
-// === CLASSE PARA EXTRA√á√ÉO DE DETALHES DO ERRO ===
+
 export interface ErrorDetails {
   message: string
   stack?: string | undefined
diff --git a/src/components/ErrorBoundary/index.ts b/src/components/ErrorBoundary/index.ts
index 55cab8b..5d01f93 100644
--- a/src/components/ErrorBoundary/index.ts
+++ b/src/components/ErrorBoundary/index.ts
@@ -1,14 +1,12 @@
 import React from 'react'
 import { ErrorBoundaryComponent, ErrorBoundaryProps } from './ErrorBoundaryComponent'
 
-// === EXPORTS PRINCIPAIS ===
 export { ErrorBoundaryComponent as ErrorBoundary }
 export type { ErrorBoundaryProps }
 export { ErrorBoundaryUI } from './ErrorBoundaryUI'
 export { ErrorReportHandler } from './ErrorReportHandler'
 export { ErrorDetailsExtractor } from './ErrorDetailsExtractor'
 
-// === HOC PARA ENVOLVER COMPONENTES ===
 export const withErrorBoundary = <P extends object>(
   Component: React.ComponentType<P>,
   errorBoundaryProps?: Omit<ErrorBoundaryProps, 'children'>
@@ -27,12 +25,10 @@ export const withErrorBoundary = <P extends object>(
   return WrappedComponent
 }
 
-// === HOOK PARA TRATAMENTO DE ERROS ===
 export const useErrorHandler = () => {
   return React.useCallback((error: Error, _errorInfo?: any) => {
     throw error
   }, [])
 }
 
-// === COMPONENTE PADR√ÉO (BACKWARD COMPATIBILITY) ===
 export default ErrorBoundaryComponent 
\ No newline at end of file
diff --git a/src/components/Layout/RootLayout.tsx b/src/components/Layout/RootLayout.tsx
index 8fc562b..a6bf630 100644
--- a/src/components/Layout/RootLayout.tsx
+++ b/src/components/Layout/RootLayout.tsx
@@ -1,196 +1,42 @@
-import React from 'react'
-import {
-  AppBar,
-  Avatar,
-  Box,
-  Divider,
-  IconButton,
-  ListItemIcon,
-  ListItemText,
-  Menu,
-  MenuItem,
-  Toolbar,
-  Typography,
-} from '@mui/material'
-import {
-  Dashboard as DashboardIcon,
-  Logout,
-  Person,
-  Settings,
-} from '@mui/icons-material'
-import { Outlet, useNavigate } from '@tanstack/react-router'
-import { AnimatePresence, motion } from 'framer-motion'
-
-import { useAuth, useLogout } from '@/hooks/useAuth'
-
+import { Box } from '@mui/material'
+import { AnimatePresence } from 'framer-motion'
+import { useAuth } from '@/hooks/useAuth'
+import { AppHeader, UserMenu, MainContent } from './components'
+import { useUserMenu } from './hooks/useUserMenu'
+
+/**
+ * Layout principal da aplica√ß√£o
+ * Respons√°vel por renderizar o cabe√ßalho (quando autenticado) e o conte√∫do principal
+ */
 export function RootLayout() {
-  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)
-  const navigate = useNavigate()
-  
   const { user, isAuthenticated } = useAuth()
-  const logoutMutation = useLogout()
-
-  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
-    setAnchorEl(event.currentTarget)
-  }
-
-  const handleMenuClose = () => {
-    setAnchorEl(null)
-  }
-
-  const handleLogout = () => {
-    handleMenuClose()
-    logoutMutation.mutate(undefined, {
-      onSuccess: () => {
-        navigate({ to: '/login', search: { redirect: undefined } })
-      }
-    })
-  }
-
-  const handleProfile = () => {
-    handleMenuClose()
-    // TODO: Implementar p√°gina de perfil
-  }
-
-  const handleSettings = () => {
-    handleMenuClose()
-    // TODO: Implementar p√°gina de configura√ß√µes
-  }
+  const userMenu = useUserMenu()
 
   return (
     <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>
       {/* App Bar - apenas quando autenticado */}
       <AnimatePresence>
         {isAuthenticated && (
-          <motion.div
-            initial={{ y: -64 }}
-            animate={{ y: 0 }}
-            exit={{ y: -64 }}
-            transition={{ duration: 0.3 }}
-          >
-            <AppBar 
-              position="sticky" 
-              className="glass-panel"
-              sx={{ 
-                backgroundColor: 'rgba(15, 23, 42, 0.9)',
-                backdropFilter: 'blur(12px)',
-                borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
-                borderRadius: 0,
-              }}
-            >
-              <Toolbar>
-                {/* Logo/Title */}
-                <Box 
-                  sx={{ 
-                    display: 'flex', 
-                    alignItems: 'center', 
-                    flexGrow: 1,
-                    cursor: 'pointer',
-                    '&:hover': {
-                      opacity: 0.8
-                    }
-                  }}
-                  onClick={() => navigate({ to: '/dashboard' })}
-                >
-                  <DashboardIcon sx={{ mr: 2, color: 'primary.main' }} />
-                  <Typography variant="h6" component="div">
-                    Data Dashboard
-                  </Typography>
-                </Box>
-
-                {/* User Menu */}
-                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
-                  <IconButton
-                    onClick={handleMenuOpen}
-                    size="small"
-                    aria-controls={anchorEl ? 'account-menu' : undefined}
-                    aria-haspopup="true"
-                    aria-expanded={anchorEl ? 'true' : undefined}
-                  >
-                    <Avatar 
-                      sx={{ 
-                        width: 32, 
-                        height: 32,
-                        background: 'linear-gradient(135deg, #0ea5e9 0%, #3b82f6 100%)',
-                      }}
-                    >
-                      {user?.name?.charAt(0).toUpperCase()}
-                    </Avatar>
-                  </IconButton>
-                </Box>
-              </Toolbar>
-            </AppBar>
-          </motion.div>
+          <AppHeader 
+            user={user} 
+            onAvatarClick={userMenu.handleOpen}
+          />
         )}
       </AnimatePresence>
 
       {/* User Menu */}
-      <Menu
-        anchorEl={anchorEl}
-        id="account-menu"
-        open={Boolean(anchorEl)}
-        onClose={handleMenuClose}
-        onClick={handleMenuClose}
-        slotProps={{
-          paper: {
-            className: 'glass-panel',
-            sx: {
-              minWidth: 200,
-              mt: 1.5,
-            },
-          }
-        }}
-        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
-        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
-      >
-        <MenuItem onClick={handleProfile}>
-          <ListItemIcon>
-            <Person fontSize="small" />
-          </ListItemIcon>
-          <ListItemText>Perfil</ListItemText>
-        </MenuItem>
-        
-        <MenuItem onClick={handleSettings}>
-          <ListItemIcon>
-            <Settings fontSize="small" />
-          </ListItemIcon>
-          <ListItemText>Configura√ß√µes</ListItemText>
-        </MenuItem>
-        
-        <Divider />
-        
-        <MenuItem onClick={handleLogout} disabled={logoutMutation.isPending}>
-          <ListItemIcon>
-            <Logout fontSize="small" />
-          </ListItemIcon>
-          <ListItemText>
-            {logoutMutation.isPending ? 'Saindo...' : 'Sair'}
-          </ListItemText>
-        </MenuItem>
-      </Menu>
+      <UserMenu
+        anchorEl={userMenu.anchorEl}
+        isOpen={userMenu.isOpen}
+        isLoggingOut={userMenu.isLoggingOut}
+        onClose={userMenu.handleClose}
+        onProfile={userMenu.handleProfile}
+        onSettings={userMenu.handleSettings}
+        onLogout={userMenu.handleLogout}
+      />
 
       {/* Main Content */}
-      <Box 
-        component="main" 
-        sx={{ 
-          flexGrow: 1,
-          backgroundColor: 'background.default',
-          minHeight: isAuthenticated ? 'calc(100vh - 64px)' : '100vh',
-        }}
-      >
-        <AnimatePresence mode="wait">
-          <motion.div
-            key={location.pathname}
-            initial={{ opacity: 0 }}
-            animate={{ opacity: 1 }}
-            exit={{ opacity: 0 }}
-            transition={{ duration: 0.2 }}
-            style={{ height: '100%' }}
-          >
-            <Outlet />
-          </motion.div>
-        </AnimatePresence>
-      </Box>
+      <MainContent isAuthenticated={isAuthenticated} />
     </Box>
   )
 } 
\ No newline at end of file
diff --git a/src/factories/mutationFactory.ts b/src/factories/mutationFactory.ts
index 1aca84e..2f81681 100644
--- a/src/factories/mutationFactory.ts
+++ b/src/factories/mutationFactory.ts
@@ -1,7 +1,6 @@
 import {QueryClient, QueryKey, UseMutationOptions} from '@tanstack/react-query'
 import {apiClient, ApiError} from '@/lib/api-client.ts'
 import {SuccessHandler} from '@/handlers/successHandler.ts'
-import {ErrorHandler} from '@/handlers/errorHandler.ts'
 import {useToast} from '@/hooks/useToast.ts'
 import axios, {AxiosError} from "axios";
 
@@ -86,20 +85,15 @@ export function createApiMutation<TData = any, TVariables = any>(
 
   return {
     mutationFn: createMutationFn<TData, TVariables>(method, url),
-    onSuccess: SuccessHandler.createMutationSuccessHandler<TData, TVariables>(
-      method,
-      typeof url === 'string' ? url : 'dynamic-url',
-      {
-        queryClient,
-        invalidateQueries,
-        showSuccess,
-        successMessage,
-        ...(toastService && { toastService }),
-        onSuccess,
-      }
-    ),
-    onError: createErrorHandler<TVariables>(method, url, showError, toastService, onError),
-    // ‚úÖ Herda configura√ß√µes globais de retry/retryDelay do QueryClient
+    onSuccess: SuccessHandler.createMutationSuccessHandler<TData, TVariables>({
+      queryClient,
+      invalidateQueries,
+      showSuccess,
+      successMessage,
+      ...(toastService && { toastService }),
+      onSuccess,
+    }),
+    onError: createErrorHandler<TVariables>(showError, toastService, onError),
     ...mutationOptions,
   }
 }
@@ -135,17 +129,18 @@ function createMutationFn<TData, TVariables>(
  * Cria o handler de erro consolidado
  */
 function createErrorHandler<TVariables>(
-  method: HttpMethod,
-  url: string | ((variables: TVariables) => string),
-  _showError: boolean,
-  _toastService?: ReturnType<typeof useToast>,
-  _onError?: (error: ApiError, variables: TVariables, context: unknown) => void
+  showError: boolean,
+  toastService?: ReturnType<typeof useToast>,
+  onError?: (error: ApiError, variables: TVariables, context: unknown) => void
 ) {
-  return (error: ApiError, _variables: TVariables, _context: unknown) => {
-    const urlString = typeof url === 'string' ? url : 'dynamic-url'
-    ErrorHandler.handleError(error, method, urlString)
+  return (error: ApiError, variables: TVariables, context: unknown) => {
+    // S√≥ mostra toast se showError for true
+    if (showError && toastService) {
+      const errorMessage = (error as any)?.response?.data?.message || error?.message || 'Erro interno do servidor'
+      toastService.error(errorMessage)
+    }
     
-    _onError?.(error, _variables, _context)
+    onError?.(error, variables, context)
   }
 }
 
diff --git a/src/features/schools/components/SchoolsTableContainer.tsx b/src/features/schools/components/SchoolsTableContainer.tsx
index d5c4520..393c721 100644
--- a/src/features/schools/components/SchoolsTableContainer.tsx
+++ b/src/features/schools/components/SchoolsTableContainer.tsx
@@ -1,4 +1,4 @@
-import React, { useMemo } from 'react'
+import { forwardRef, useImperativeHandle, useMemo } from 'react'
 import { SchoolsTableView } from './SchoolsTableView'
 import { useSchoolsTableController } from '../hooks/useSchoolsTableController'
 
@@ -7,28 +7,52 @@ interface SchoolsTableContainerProps {
   onError?: (error: Error) => void
   onSchoolSelected?: (school: any) => void
   onSchoolDoubleClicked?: (school: any) => void
+  onSelectionChanged?: (selectedCount: number) => void
   className?: string
 }
 
-export const SchoolsTableContainer: React.FC<SchoolsTableContainerProps> = ({
+export interface SchoolsTableHandle {
+  exportToCsv: (filename?: string) => boolean
+  exportVisiblePageToCsv: (filename?: string) => boolean
+  exportSelectedToCsv: (filename?: string) => boolean
+  exportAllColumnsToCsv: (filename?: string) => boolean
+  autoSizeColumns: () => void
+  refresh: () => void
+  isLoading: boolean
+  isGridReady: boolean
+}
+
+export const SchoolsTableContainer = forwardRef<SchoolsTableHandle, SchoolsTableContainerProps>(({
   onDataChanged,
   onError,
   onSchoolSelected,
   onSchoolDoubleClicked,
+  onSelectionChanged,
   className = 'ag-theme-quartz-dark'
-}) => {
-  // Memoizar as props do controller para evitar problemas de Fast refresh
+}, ref) => {
   const controllerProps = useMemo(() => {
     const props: Parameters<typeof useSchoolsTableController>[0] = {}
     if (onDataChanged) props.onDataChanged = onDataChanged
     if (onError) props.onError = onError
     if (onSchoolSelected) props.onSchoolSelected = onSchoolSelected
     if (onSchoolDoubleClicked) props.onSchoolDoubleClicked = onSchoolDoubleClicked
+    if (onSelectionChanged) props.onSelectionChanged = onSelectionChanged
     return props
-  }, [onDataChanged, onError, onSchoolSelected, onSchoolDoubleClicked])
+  }, [onDataChanged, onError, onSchoolSelected, onSchoolDoubleClicked, onSelectionChanged])
 
   const controller = useSchoolsTableController(controllerProps)
 
+  useImperativeHandle(ref, () => ({
+    exportToCsv: controller.exportToCsv,
+    exportVisiblePageToCsv: controller.exportVisiblePageToCsv,
+    exportSelectedToCsv: controller.exportSelectedToCsv,
+    exportAllColumnsToCsv: controller.exportAllColumnsToCsv,
+    autoSizeColumns: controller.autoSizeColumns,
+    refresh: controller.refresh,
+    isLoading: controller.isLoading,
+    isGridReady: controller.isGridReady,
+  }), [controller])
+
   return (
     <SchoolsTableView
       gridOptions={controller.gridOptions}
@@ -42,7 +66,7 @@ export const SchoolsTableContainer: React.FC<SchoolsTableContainerProps> = ({
       className={className}
     />
   )
-}
+})
 
-// Export do controller para casos de uso avan√ßado
-export { useSchoolsTableController } from '../hooks/useSchoolsTableController' 
\ No newline at end of file
+SchoolsTableContainer.displayName = 'SchoolsTableContainer'
+export { useSchoolsTableController } from '../hooks/useSchoolsTableController'
\ No newline at end of file
diff --git a/src/features/schools/components/SchoolsTableView.tsx b/src/features/schools/components/SchoolsTableView.tsx
index 6c64008..8cbc9bb 100644
--- a/src/features/schools/components/SchoolsTableView.tsx
+++ b/src/features/schools/components/SchoolsTableView.tsx
@@ -91,12 +91,23 @@ export const SchoolsTableView: React.FC<SchoolsTableViewProps> = ({
             justifyContent: 'center'
           },
           '& .ag-row': {
-            borderBottom: '1px solid rgba(255, 255, 255, 0.05)'
+            borderBottom: '1px solid rgba(255, 255, 255, 0.05)',
+            cursor: 'pointer',
+            transition: 'all 0.2s ease',
+            '&:hover': {
+              backgroundColor: 'rgba(14, 165, 233, 0.08)',
+              transform: 'translateX(2px)',
+              boxShadow: '2px 0 8px rgba(14, 165, 233, 0.1)',
+              '& .ag-cell': {
+                borderRightColor: 'rgba(14, 165, 233, 0.2)'
+              }
+            }
           },
           '& .ag-cell': {
             display: 'flex',
             alignItems: 'center',
-            borderRight: '1px solid rgba(255, 255, 255, 0.05)'
+            borderRight: '1px solid rgba(255, 255, 255, 0.05)',
+            transition: 'border-color 0.2s ease'
           },
           '& .ag-paging-panel': {
             backgroundColor: 'rgba(30, 41, 59, 0.9)',
diff --git a/src/features/schools/components/dialogs/ImportDialog.tsx b/src/features/schools/components/dialogs/ImportDialog.tsx
index 5d0b5bd..e6d1a5d 100644
--- a/src/features/schools/components/dialogs/ImportDialog.tsx
+++ b/src/features/schools/components/dialogs/ImportDialog.tsx
@@ -1,117 +1,82 @@
-import React, { useRef, useState } from 'react'
-import { Box, Button, Dialog, DialogContent, DialogTitle, LinearProgress, Stack, Typography } from '@mui/material'
-import { useCsvImport } from '../../hooks/useCsvJobs'
-import { useCsvWebSocket } from '../../hooks/useCsvWebSocket'
-import { useAuthStore } from '@/stores/authStore'
-import CloudUploadIcon from '@mui/icons-material/CloudUpload'
+import React from 'react'
+import { Button, Dialog, DialogContent, DialogTitle, Stack } from '@mui/material'
+import { 
+  ConnectionStatus,
+  FileUpload,
+  type ImportDialogProps,
+  ProgressDisplay,
+  useImportDialog
+} from './import'
 
-interface ImportDialogProps {
-  open: boolean
-  onClose: () => void
-}
-
-interface CsvProgressData {
-  id: string
-  status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED' | 'CANCELLED'
-  progress?: number
-}
-
-export const ImportDialog: React.FC<ImportDialogProps> = ({ open, onClose }) => {
-  const fileInputRef = useRef<HTMLInputElement | null>(null)
-  const [selectedFile, setSelectedFile] = useState<File | null>(null)
-  const [jobId, setJobId] = useState<string | null>(null)
-  const [progressData, setProgressData] = useState<CsvProgressData | null>(null)
-
-  const accessToken = useAuthStore(state => state.accessToken)
-  const csvImport = useCsvImport()
-  
-  const { isConnected, subscribe, unsubscribe } = useCsvWebSocket({
-    accessToken: accessToken || '',
-    onProgressUpdate: (data) => {
-      setProgressData(data)
-    },
-    _onError: (error) => {
-      void error
-    }
-  })
-
-  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
-    const file = e.target.files?.[0]
-    if (file) setSelectedFile(file)
-  }
-
-  const handleStartImport = () => {
-    if (!selectedFile) return
-    const formData = new FormData()
-    formData.append('file', selectedFile)
-    csvImport.mutate(formData, {
-      onSuccess: (response) => {
-        setJobId(response.jobId)
-        if (isConnected) {
-          subscribe(response.jobId)
-        }
-      },
-    })
-  }
+export const ImportDialog: React.FC<ImportDialogProps> = ({ open, onClose, onImportCompleted }) => {
+  const {
+    fileInputRef,
+    selectedFile,
+    setSelectedFile,
+    jobId,
+    progressData,
+    webSocket,
+    handleStartImport,
+    handleCleanup,
+    getButtonText,
+    isButtonDisabled
+  } = useImportDialog({ onImportCompleted })
 
   const handleClose = () => {
-    if (jobId) {
-      unsubscribe(jobId)
-    }
-    setJobId(null)
-    setProgressData(null)
+    handleCleanup()
     onClose()
   }
 
-  const progress = progressData?.progress || 0
-  const isCompleted = progressData?.status === 'COMPLETED'
-  const isUploading = csvImport.status === 'pending'
+  const safeGetButtonText = () => {
+    try {
+      return typeof getButtonText === 'function' ? getButtonText() : 'Iniciar Importa√ß√£o'
+    } catch (error) {
+      
+      return 'Iniciar Importa√ß√£o'
+    }
+  }
 
-  const getButtonText = () => {
-    if (jobId) {
-      return isCompleted ? 'Conclu√≠do' : 'Importando...'
+  const safeIsButtonDisabled = () => {
+    try {
+      return typeof isButtonDisabled === 'function' ? isButtonDisabled() : true
+    } catch (error) {
+      
+      return true
     }
-    return 'Iniciar Importa√ß√£o'
   }
 
   return (
     <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
       <DialogTitle>Importar Escolas via CSV</DialogTitle>
       <DialogContent>
-        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
-          Fa√ßa upload de um arquivo CSV para importar dados de escolas
-        </Typography>
+        <ConnectionStatus
+          isConnected={webSocket.isConnected}
+          connectionType={webSocket.connectionType}
+          connectionQuality={webSocket.connectionQuality}
+          lastMessageTime={webSocket.lastMessageTime}
+          error={webSocket.error}
+        />
 
-        <Box sx={{ p: 2, textAlign: 'center' }}>
-          <input
-            type="file"
-            accept=".csv"
-            hidden
-            ref={fileInputRef}
-            onChange={handleFileChange}
-          />
-          <Button variant="outlined" startIcon={<CloudUploadIcon />} onClick={() => fileInputRef.current?.click()}>
-            {selectedFile ? selectedFile.name : 'Selecionar arquivo CSV'}
-          </Button>
-        </Box>
+        <FileUpload
+          selectedFile={selectedFile}
+          onFileChange={setSelectedFile}
+          isConnected={webSocket.isConnected}
+          fileInputRef={fileInputRef}
+        />
 
-        {jobId && (
-          <Box sx={{ mt: 2 }}>
-            <Typography variant="body2" gutterBottom>
-              Progresso da importa√ß√£o: {progress}%
-            </Typography>
-            <LinearProgress variant="determinate" value={progress} />
-          </Box>
-        )}
+        <ProgressDisplay
+          jobId={jobId}
+          progressData={progressData}
+        />
 
         <Stack direction="row" spacing={2} sx={{ mt: 3 }} justifyContent="flex-end">
           <Button onClick={handleClose}>Fechar</Button>
           <Button
             variant="contained"
             onClick={jobId ? handleClose : handleStartImport}
-            disabled={!selectedFile || isUploading || (!!jobId && !isCompleted)}
+            disabled={safeIsButtonDisabled()}
           >
-            {getButtonText()}
+            {safeGetButtonText()}
           </Button>
         </Stack>
       </DialogContent>
diff --git a/src/features/schools/components/dialogs/SchoolFormActions.tsx b/src/features/schools/components/dialogs/SchoolFormActions.tsx
index c669a2c..38a4c6f 100644
--- a/src/features/schools/components/dialogs/SchoolFormActions.tsx
+++ b/src/features/schools/components/dialogs/SchoolFormActions.tsx
@@ -1,12 +1,17 @@
-import React from 'react'
+import React, { useState } from 'react'
 import {
   Box,
   Button,
   CircularProgress,
+  Dialog,
   DialogActions,
+  DialogContent,
+  DialogContentText,
+  DialogTitle,
   Stack,
   Typography,
 } from '@mui/material'
+import { Delete as DeleteIcon } from '@mui/icons-material'
 
 interface InfoBoxProps {
   children: React.ReactNode
@@ -23,16 +28,22 @@ export const InfoBox: React.FC<InfoBoxProps> = ({ children }) => (
 interface SchoolFormActionsProps {
   isSubmitting: boolean
   isEditing: boolean
+  schoolName?: string
   onSubmit: () => void
+  onDelete?: (() => Promise<void> | void) | undefined
   onClose: () => void
 }
 
 export const SchoolFormActions: React.FC<SchoolFormActionsProps> = ({
   isSubmitting,
   isEditing,
+  schoolName = '',
   onSubmit,
+  onDelete,
   onClose
 }) => {
+  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
+
   const getSubmitButtonText = () => {
     if (isSubmitting) {
       return isEditing ? 'Salvando...' : 'Criando...'
@@ -40,29 +51,97 @@ export const SchoolFormActions: React.FC<SchoolFormActionsProps> = ({
     return isEditing ? 'Salvar Altera√ß√µes' : 'Criar Escola'
   }
 
+  const handleDeleteClick = () => {
+    setDeleteDialogOpen(true)
+  }
+
+  const handleDeleteConfirm = () => {
+    setDeleteDialogOpen(false)
+    onDelete?.()
+  }
+
+  const handleDeleteCancel = () => {
+    setDeleteDialogOpen(false)
+  }
+
   return (
-    <DialogActions sx={{ p: 3 }}>
-      <Stack direction="row" spacing={2} width="100%" justifyContent="space-between">
-        <Box />
-        <Stack direction="row" spacing={2}>
+    <>
+      <DialogActions sx={{ p: 3 }}>
+        <Stack direction="row" spacing={2} width="100%" justifyContent="space-between">
+          {/* Bot√£o de excluir √† esquerda (apenas no modo edi√ß√£o) */}
+          <Box>
+            {isEditing && onDelete && (
+              <Button 
+                onClick={handleDeleteClick}
+                disabled={isSubmitting}
+                size="large"
+                color="error"
+                variant="outlined"
+                startIcon={<DeleteIcon />}
+              >
+                Excluir Escola
+              </Button>
+            )}
+          </Box>
+
+          {/* Bot√µes principais √† direita */}
+          <Stack direction="row" spacing={2}>
+            <Button 
+              onClick={onClose}
+              disabled={isSubmitting}
+              size="large"
+            >
+              Cancelar
+            </Button>
+            <Button 
+              onClick={onSubmit}
+              variant="contained" 
+              disabled={isSubmitting}
+              size="large"
+              startIcon={isSubmitting ? <CircularProgress size={20} /> : null}
+            >
+              {getSubmitButtonText()}
+            </Button>
+          </Stack>
+        </Stack>
+      </DialogActions>
+
+      {/* Di√°logo de confirma√ß√£o para exclus√£o */}
+      <Dialog
+        open={deleteDialogOpen}
+        onClose={handleDeleteCancel}
+        maxWidth="sm"
+        fullWidth
+      >
+        <DialogTitle sx={{ color: 'error.main' }}>
+          ‚ö†Ô∏è Confirmar Exclus√£o
+        </DialogTitle>
+        <DialogContent>
+          <DialogContentText>
+            Tem certeza que deseja excluir a escola <strong>"{schoolName}"</strong>?
+          </DialogContentText>
+          <DialogContentText sx={{ mt: 2, color: 'error.main' }}>
+            ‚ö†Ô∏è <strong>Esta a√ß√£o n√£o pode ser desfeita!</strong> Todos os dados da escola ser√£o removidos permanentemente.
+          </DialogContentText>
+        </DialogContent>
+        <DialogActions sx={{ p: 2 }}>
           <Button 
-            onClick={onClose}
+            onClick={handleDeleteCancel}
             disabled={isSubmitting}
-            size="large"
           >
             Cancelar
           </Button>
           <Button 
-            onClick={onSubmit}
-            variant="contained" 
+            onClick={handleDeleteConfirm}
+            variant="contained"
+            color="error"
             disabled={isSubmitting}
-            size="large"
-            startIcon={isSubmitting ? <CircularProgress size={20} /> : null}
+            startIcon={isSubmitting ? <CircularProgress size={20} /> : <DeleteIcon />}
           >
-            {getSubmitButtonText()}
+            {isSubmitting ? 'Excluindo...' : 'Excluir Escola'}
           </Button>
-        </Stack>
-      </Stack>
-    </DialogActions>
+        </DialogActions>
+      </Dialog>
+    </>
   )
 } 
\ No newline at end of file
diff --git a/src/features/schools/components/dialogs/SchoolFormDialog.tsx b/src/features/schools/components/dialogs/SchoolFormDialog.tsx
index a552364..be75ce3 100644
--- a/src/features/schools/components/dialogs/SchoolFormDialog.tsx
+++ b/src/features/schools/components/dialogs/SchoolFormDialog.tsx
@@ -21,12 +21,18 @@ interface SchoolFormDialogProps {
   open: boolean
   onClose: () => void
   selectedSchool: School | null
+  onSchoolCreated?: ((school: School) => void) | undefined
+  onSchoolUpdated?: ((school: School) => void) | undefined
+  onSchoolDeleted?: (() => void) | undefined
 }
 
 export const SchoolFormDialog: React.FC<SchoolFormDialogProps> = ({ 
   open, 
   onClose, 
-  selectedSchool 
+  selectedSchool,
+  onSchoolCreated,
+  onSchoolUpdated,
+  onSchoolDeleted
 }) => {
   const {
     formData,
@@ -36,11 +42,15 @@ export const SchoolFormDialog: React.FC<SchoolFormDialogProps> = ({
     isLoading,
     updateField,
     handleSubmit,
+    handleDelete,
     resetForm,
   } = useSchoolFormState({
     school: selectedSchool,
     isOpen: open,
     onClose,
+    onSchoolCreated,
+    onSchoolUpdated,
+    onSchoolDeleted,
   })
 
   const handleClose = () => {
@@ -100,7 +110,9 @@ export const SchoolFormDialog: React.FC<SchoolFormDialogProps> = ({
         <SchoolFormActions
           isSubmitting={isSubmitting}
           isEditing={isEditing}
+          schoolName={selectedSchool?.schoolName || formData.schoolName || ''}
           onSubmit={handleSubmit}
+          onDelete={isEditing ? handleDelete : undefined}
           onClose={handleClose}
         />
       </form>
diff --git a/src/features/schools/components/dialogs/SchoolFormSections.tsx b/src/features/schools/components/dialogs/SchoolFormSections.tsx
index 3efe565..19e83f2 100644
--- a/src/features/schools/components/dialogs/SchoolFormSections.tsx
+++ b/src/features/schools/components/dialogs/SchoolFormSections.tsx
@@ -1,329 +1,15 @@
-import React from 'react'
-import {
-  Box,
-  Chip,
-  IconButton,
-  MenuItem,
-  Paper,
-  Select,
-  Stack,
-  TextField,
-  Tooltip,
-  Typography,
-} from '@mui/material'
-import { Delete as DeleteIcon } from '@mui/icons-material'
-import { useApiQuery } from '@/hooks/useApiQuery'
-import { useAuthStore } from '@/stores/authStore'
-import { CACHE_TIME_HOUR, CACHE_TIME_LONG } from '@/constants/pagination'
-
-interface FormSectionProps {
-  title: string
-  children: React.ReactNode
-}
-
-export const FormSection: React.FC<FormSectionProps> = ({ title, children }) => (
-  <Paper variant="outlined" sx={{ p: 3, mb: 3 }}>
-    <Typography variant="h6" gutterBottom color="primary">
-      {title}
-    </Typography>
-    <Box
-      sx={{
-        display: 'grid',
-        gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
-        gap: 2,
-      }}
-    >
-      {children}
-    </Box>
-  </Paper>
-)
-
-interface BasicInfoSectionProps {
-  formData: any
-  errors: any
-  updateField: (field: any, value: any) => void
-  isEditing: boolean
-}
-
-export const BasicInfoSection: React.FC<BasicInfoSectionProps> = ({
-  formData,
-  errors,
-  updateField,
-  isEditing
-}) => (
-  <FormSection title="üìã Informa√ß√µes B√°sicas">
-    <TextField
-      fullWidth
-      required
-      type="number"
-      label="C√≥digo da Escola"
-      placeholder="Digite o c√≥digo..."
-      value={formData.code}
-      onChange={(e) => updateField('code', e.target.value ? Number(e.target.value) : '')}
-      error={!!errors.code}
-      helperText={errors.code || 'C√≥digo √∫nico da escola'}
-      disabled={isEditing}
-      sx={{ gridColumn: { xs: 'span 1', md: 'span 1' } }}
-    />
-
-    <TextField
-      fullWidth
-      required
-      label="Nome da Escola"
-      placeholder="Digite o nome completo..."
-      value={formData.schoolName}
-      onChange={(e) => updateField('schoolName', e.target.value)}
-      error={!!errors.schoolName}
-      helperText={errors.schoolName || 'Nome completo da escola (m√°ximo 200 caracteres)'}
-      inputProps={{ maxLength: 200 }}
-      sx={{ gridColumn: { xs: 'span 1', md: 'span 2' } }}
-    />
-
-    <TextField
-      fullWidth
-      label="Depend√™ncia Administrativa"
-      placeholder="Ex: Municipal, Estadual, Federal..."
-      value={formData.administrativeDependency}
-      onChange={(e) => updateField('administrativeDependency', e.target.value)}
-      error={!!errors.administrativeDependency}
-      helperText={errors.administrativeDependency || 'Esfera administrativa (m√°ximo 100 caracteres)'}
-      inputProps={{ maxLength: 100 }}
-    />
-
-    <TextField
-      fullWidth
-      label="Estado (UF)"
-      placeholder="Ex: SP, RJ, MG..."
-      value={formData.stateCode}
-      onChange={(e) => updateField('stateCode', e.target.value.toUpperCase())}
-      error={!!errors.stateCode}
-      helperText={errors.stateCode || 'Sigla do estado'}
-      inputProps={{ maxLength: 10 }}
-    />
-
-    <TextField
-      fullWidth
-      type="number"
-      label="C√≥digo da Escola (Alt)"
-      placeholder="C√≥digo alternativo..."
-      value={formData.schoolCode}
-      onChange={(e) => updateField('schoolCode', e.target.value ? Number(e.target.value) : '')}
-      error={!!errors.schoolCode}
-      helperText={errors.schoolCode || 'C√≥digo alternativo (opcional)'}
-    />
-  </FormSection>
-)
-
-interface LocationSectionProps {
-  formData: any
-  errors: any
-  updateField: (field: any, value: any) => void
-}
-
-export const LocationSection: React.FC<LocationSectionProps> = ({
-  formData,
-  errors,
-  updateField
-}) => (
-  <FormSection title="üìç Localiza√ß√£o">
-    <TextField
-      fullWidth
-      label="Munic√≠pio"
-      placeholder="Digite o munic√≠pio..."
-      value={formData.municipality}
-      onChange={(e) => updateField('municipality', e.target.value)}
-      error={!!errors.municipality}
-      helperText={errors.municipality || 'Nome do munic√≠pio (m√°ximo 100 caracteres)'}
-      inputProps={{ maxLength: 100 }}
-    />
-
-    <TextField
-      fullWidth
-      label="Distrito/Bairro"
-      placeholder="Digite o distrito ou bairro..."
-      value={formData.district}
-      onChange={(e) => updateField('district', e.target.value)}
-      error={!!errors.district}
-      helperText={errors.district || 'Distrito ou bairro (m√°ximo 100 caracteres)'}
-      inputProps={{ maxLength: 100 }}
-    />
-  </FormSection>
-)
-
-interface ClassificationSectionProps {
-  formData: any
-  errors: any
-  updateField: (field: any, value: any) => void
-}
-
-export const ClassificationSection: React.FC<ClassificationSectionProps> = ({
-  formData,
-  errors,
-  updateField
-}) => (
-  <FormSection title="üè´ Classifica√ß√£o">
-    <TextField
-      fullWidth
-      type="number"
-      label="Tipo de Escola"
-      placeholder="Ex: 1, 2, 3..."
-      value={formData.schoolType}
-      onChange={(e) => updateField('schoolType', e.target.value ? Number(e.target.value) : '')}
-      error={!!errors.schoolType}
-      helperText={errors.schoolType || 'C√≥digo do tipo de escola'}
-    />
-
-    <TextField
-      fullWidth
-      label="Descri√ß√£o do Tipo"
-      placeholder="Ex: Escola Estadual, EMEI..."
-      value={formData.schoolTypeDescription}
-      onChange={(e) => updateField('schoolTypeDescription', e.target.value)}
-      error={!!errors.schoolTypeDescription}
-      helperText={errors.schoolTypeDescription || 'Descri√ß√£o do tipo (m√°ximo 100 caracteres)'}
-      inputProps={{ maxLength: 100 }}
-      sx={{ gridColumn: { xs: 'span 1', md: 'span 2' } }}
-    />
-
-    <TextField
-      fullWidth
-      type="number"
-      label="C√≥digo de Situa√ß√£o"
-      placeholder="Ex: 1, 2, 3..."
-      value={formData.situationCode}
-      onChange={(e) => updateField('situationCode', e.target.value ? Number(e.target.value) : '')}
-      error={!!errors.situationCode}
-      helperText={errors.situationCode || 'Status da escola'}
-    />
-  </FormSection>
-)
-
-interface MetricsSectionProps {
-  formData: any
-  errors: any
-  updateField: (field: any, value: any) => void
-}
-
-const useMetricsList = () => {
-  const accessToken = useAuthStore(state => state.accessToken)
-
-  const query = useApiQuery<string[]>(
-    ['school-metrics-list'],
-    '/schools/metrics',
-    {},
-    {
-      staleTime: CACHE_TIME_LONG,
-      gcTime: CACHE_TIME_HOUR,
-      retry: 2,
-      enabled: !!accessToken,
-    }
-  )
-
-  return query
-}
-
-export const MetricsSection: React.FC<MetricsSectionProps> = ({
-  formData,
-  errors,
-  updateField
-}) => {
-  const { data: availableMetrics = [], isLoading } = useMetricsList()
-  const currentMetrics = formData.metrics || {}
-
-  const handleAddMetric = (metric: string) => {
-    if (metric && !currentMetrics[metric]) {
-      updateField('metrics', {
-        ...currentMetrics,
-        [metric]: 0
-      })
-    }
-  }
-
-  const handleUpdateMetricValue = (metric: string, value: number) => {
-    updateField('metrics', {
-      ...currentMetrics,
-      [metric]: value
-    })
-  }
-
-  const handleRemoveMetric = (metric: string) => {
-    const newMetrics = { ...currentMetrics }
-    delete newMetrics[metric]
-    updateField('metrics', newMetrics)
-  }
-
-  const getAvailableMetricsForSelection = () => {
-    return availableMetrics.filter(metric => !currentMetrics[metric])
-  }
-
-  return (
-    <FormSection title="üìä M√©tricas da Escola">
-      <Box sx={{ gridColumn: 'span 2' }}>
-        <Stack spacing={2}>
-          <Select
-            fullWidth
-            value=""
-            onChange={(e) => {
-              if (e.target.value) {
-                handleAddMetric(e.target.value as string)
-              }
-            }}
-            displayEmpty
-            disabled={isLoading}
-          >
-            <MenuItem value="" disabled>
-              Selecione uma m√©trica...
-            </MenuItem>
-            {getAvailableMetricsForSelection().map((metric) => (
-              <MenuItem key={metric} value={metric}>
-                {metric.replace(/_/g, ' ')}
-              </MenuItem>
-            ))}
-          </Select>
-
-          {Object.entries(currentMetrics).map(([metric, value]) => (
-            <Stack key={metric} direction="row" spacing={2} alignItems="center">
-              <Chip
-                label={metric.replace(/_/g, ' ')}
-                color="primary"
-                variant="outlined"
-                sx={{ minWidth: 200, justifyContent: 'flex-start' }}
-              />
-              <TextField
-                type="number"
-                label="Valor"
-                value={value}
-                onChange={(e) => handleUpdateMetricValue(metric, Number(e.target.value) || 0)}
-                inputProps={{ min: 0 }}
-                error={!!errors[`metrics.${metric}`]}
-                helperText={errors[`metrics.${metric}`]}
-                sx={{ flex: 1 }}
-              />
-              <Tooltip title="Remover m√©trica">
-                <IconButton
-                  onClick={() => handleRemoveMetric(metric)}
-                  color="error"
-                  size="small"
-                >
-                  <DeleteIcon />
-                </IconButton>
-              </Tooltip>
-            </Stack>
-          ))}
-
-          {Object.keys(currentMetrics).length === 0 && (
-            <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
-              Nenhuma m√©trica adicionada. Use o campo acima para adicionar m√©tricas da escola.
-            </Typography>
-          )}
-
-          {isLoading && (
-            <Typography variant="body2" color="text.secondary">
-              Carregando m√©tricas dispon√≠veis...
-            </Typography>
-          )}
-        </Stack>
-      </Box>
-    </FormSection>
-  )
-} 
\ No newline at end of file
+export {
+  FormSection,
+  BasicInfoSection,
+  LocationSection,
+  ClassificationSection,
+  MetricsSection
+} from './sections'
+
+export type {
+  FormSectionProps,
+  BasicInfoSectionProps,
+  LocationSectionProps,
+  ClassificationSectionProps,
+  MetricsSectionProps
+} from './sections' 
\ No newline at end of file
diff --git a/src/features/schools/components/dialogs/useSchoolFormState.ts b/src/features/schools/components/dialogs/useSchoolFormState.ts
index db25313..ac6c81b 100644
--- a/src/features/schools/components/dialogs/useSchoolFormState.ts
+++ b/src/features/schools/components/dialogs/useSchoolFormState.ts
@@ -1,94 +1,45 @@
 import { useCallback, useEffect, useState } from 'react'
-import { useCreateSchool, useUpdateSchool } from '../../hooks/useSchoolMutations'
-import type { School, SchoolCreateRequest, SchoolUpdateRequest } from '@/schemas/schoolSchemas'
-
-interface UseSchoolFormStateProps {
-  school?: School | null
-  isOpen?: boolean
-  onClose?: () => void
-  onSuccess?: (school: School) => void
-}
-
-interface FormErrors {
-  [key: string]: string
-}
-
-interface UseSchoolFormStateReturn {
-  formData: Partial<School>
-  errors: FormErrors
-  isSubmitting: boolean
-  isEditing: boolean
-  isLoading: boolean
-  updateField: (field: string, value: any) => void
-  resetForm: () => void
-  handleSubmit: () => Promise<void>
-  validateForm: () => boolean
-}
-
-const initialFormData: Partial<School> = {
-  code: 0,
-  schoolName: '',
-  administrativeDependency: '',
-  stateCode: '',
-  municipality: '',
-  district: '',
-  schoolType: 0,
-  schoolTypeDescription: '',
-  situationCode: 0,
-  schoolCode: 0,
-  metrics: undefined
-}
+import { useCreateSchool, useDeleteSchool, useUpdateSchool } from '../../hooks/useSchoolMutations'
+import { 
+  createDeleteHandler,
+  createSubmitHandler,
+  type FormErrors,
+  initialFormData,
+  prepareFormDataFromSchool,
+  type UseSchoolFormStateProps,
+  type UseSchoolFormStateReturn,
+  validateForm
+} from './utils'
 
 export const useSchoolFormState = ({
   school,
   isOpen = true,
   onClose,
-  onSuccess
+  onSuccess,
+  onSchoolCreated,
+  onSchoolUpdated,
+  onSchoolDeleted
 }: UseSchoolFormStateProps): UseSchoolFormStateReturn => {
-  const [formData, setFormData] = useState<Partial<School>>(initialFormData)
+  const [formData, setFormData] = useState(initialFormData)
   const [errors, setErrors] = useState<FormErrors>({})
   const [isSubmitting, setIsSubmitting] = useState(false)
 
   const createSchool = useCreateSchool()
   const updateSchool = useUpdateSchool()
+  const deleteSchool = useDeleteSchool()
 
   const isEditing = !!school?.code
-  const isLoading = createSchool.status === 'pending' || updateSchool.status === 'pending'
-
-  const validateField = (field: string, value: any): string => {
-    if (field === 'code' && (!value || value === 0)) {
-      return 'C√≥digo √© obrigat√≥rio'
-    }
-    
-    if (field === 'schoolName' && (!value || value.trim() === '')) {
-      return 'Nome da escola √© obrigat√≥rio'
-    }
-    
-    return ''
-  }
-
-  const validateForm = useCallback((): boolean => {
-    const newErrors: FormErrors = {}
-    const requiredFields = ['code', 'schoolName']
-
-    requiredFields.forEach(field => {
-      const error = validateField(field, formData[field as keyof School])
-      if (error) {
-        newErrors[field] = error
-      }
-    })
+  const isLoading = createSchool.status === 'pending' || updateSchool.status === 'pending' || deleteSchool.status === 'pending'
 
-    setErrors(newErrors)
-    return Object.keys(newErrors).length === 0
+  const validateFormCallback = useCallback((): boolean => {
+    const { isValid, errors: validationErrors } = validateForm(formData)
+    setErrors(validationErrors)
+    return isValid
   }, [formData])
 
   useEffect(() => {
     if (isOpen && school) {
-      const schoolWithFlatMetrics = {
-        ...school,
-        metrics: school.metrics?.metrics || {}
-      }
-      setFormData(schoolWithFlatMetrics)
+      setFormData(prepareFormDataFromSchool(school))
     } else if (isOpen) {
       setFormData({ ...initialFormData, metrics: {} })
     }
@@ -113,69 +64,39 @@ export const useSchoolFormState = ({
     setIsSubmitting(false)
   }, [])
 
-  const prepareCreateData = (data: Partial<School>): SchoolCreateRequest => {
-    return {
-      code: Number(data.code!),
-      schoolName: data.schoolName!,
-      administrativeDependency: data.administrativeDependency,
-      stateCode: data.stateCode,
-      municipality: data.municipality,
-      district: data.district,
-      schoolType: data.schoolType ? Number(data.schoolType) : undefined,
-      schoolTypeDescription: data.schoolTypeDescription,
-      situationCode: data.situationCode ? Number(data.situationCode) : undefined,
-      schoolCode: data.schoolCode ? Number(data.schoolCode) : undefined,
-      metrics: data.metrics && Object.keys(data.metrics).length > 0 ? data.metrics as Record<string, number> : undefined
-    }
-  }
-
-  const prepareUpdateData = (data: Partial<School>): SchoolUpdateRequest => {
-    return {
-      schoolName: data.schoolName,
-      administrativeDependency: data.administrativeDependency,
-      stateCode: data.stateCode,
-      municipality: data.municipality,
-      district: data.district,
-      schoolType: data.schoolType ? Number(data.schoolType) : undefined,
-      schoolTypeDescription: data.schoolTypeDescription,
-      situationCode: data.situationCode ? Number(data.situationCode) : undefined,
-      schoolCode: data.schoolCode ? Number(data.schoolCode) : undefined,
-      metrics: data.metrics && Object.keys(data.metrics).length > 0 ? data.metrics as Record<string, number> : undefined
-    }
-  }
-
-  const handleSubmit = useCallback(async () => {
-    if (!validateForm()) {
-      return
-    }
-
-    try {
-      setIsSubmitting(true)
-      
-      const mutationPromise = school?.code
-        ? updateSchool.mutateAsync({ code: school.code, data: prepareUpdateData(formData) })
-        : createSchool.mutateAsync(prepareCreateData(formData))
-
-      const result = await mutationPromise
-      
-      resetForm()
-      onSuccess?.(result)
-      onClose?.()
-    } catch (error) {
-      void error
-      setErrors({})
-      setIsSubmitting(false)
-    }
-  }, [
-    formData,
-    school,
-    validateForm,
-    createSchool,
-    updateSchool,
-    resetForm,
-    onSuccess,
-    onClose
-  ])
+  const handleSubmit = useCallback(
+    createSubmitHandler({
+      formData,
+      school,
+      validateFormFn: validateFormCallback,
+      createSchool,
+      updateSchool,
+      resetForm,
+      callbacks: {
+        onSchoolCreated: onSchoolCreated || undefined,
+        onSchoolUpdated: onSchoolUpdated || undefined,
+        onSuccess: onSuccess || undefined,
+        onClose: onClose || undefined
+      },
+      setIsSubmitting,
+      setErrors
+    }),
+    [formData, school, validateFormCallback, createSchool, updateSchool, resetForm, onSchoolCreated, onSchoolUpdated, onSuccess, onClose]
+  )
+
+  const handleDelete = useCallback(
+    createDeleteHandler({
+      school,
+      deleteSchool,
+      resetForm,
+      callbacks: { 
+        onSchoolDeleted: onSchoolDeleted || undefined, 
+        onClose: onClose || undefined 
+      },
+      setIsSubmitting
+    }),
+    [school, deleteSchool, resetForm, onSchoolDeleted, onClose]
+  )
 
   return {
     formData,
@@ -186,6 +107,7 @@ export const useSchoolFormState = ({
     updateField,
     resetForm,
     handleSubmit,
-    validateForm
+    handleDelete,
+    validateForm: validateFormCallback
   }
 } 
\ No newline at end of file
diff --git a/src/features/schools/hooks/index.ts b/src/features/schools/hooks/index.ts
index ffd10a6..4f17da3 100644
--- a/src/features/schools/hooks/index.ts
+++ b/src/features/schools/hooks/index.ts
@@ -1,10 +1,14 @@
-// Hooks principais para o SchoolsTable
-export { useSchoolsGrid } from './useSchoolsGrid'
-export { useSchoolsDatasource } from './useSchoolsDatasource'
-export { useSchoolsEvents } from './useSchoolsEvents'
 export { useSchoolsTableController } from './useSchoolsTableController'
+export { useGridExport } from './export/useGridExport'
+export { useGridEventHandlers } from './grid/useGridEventHandlers'
+
+export type { UseSchoolsTableControllerProps, ExportOptions } from './types/tableController.types'
 
+export { useSchoolsGrid } from './useSchoolsGrid'
+export { useSchoolsEvents } from './useSchoolsEvents'
 export { useSchoolColumns } from './useSchoolColumns'
+
+export { useSchoolsDatasource } from './useSchoolsDatasource'
 export { useCreateSchool, useUpdateSchool, useDeleteSchool } from './useSchoolMutations'
 export { useSchoolsQuery } from './useSchoolsQuery'
 export { useCsvWebSocket } from './useCsvWebSocket'
diff --git a/src/features/schools/hooks/useCsvJobs.ts b/src/features/schools/hooks/useCsvJobs.ts
index 83e4122..0987c2f 100644
--- a/src/features/schools/hooks/useCsvJobs.ts
+++ b/src/features/schools/hooks/useCsvJobs.ts
@@ -133,7 +133,7 @@ export const useCancelCsvJob = () => {
     '/csv/jobs/cancel',
     {
       successMessage: 'Job cancelado com sucesso!',
-      onSuccess: (_ignored, variables) => {
+      onSuccess: (_, variables) => {
         void queryClient.invalidateQueries({ queryKey: ['csv-jobs'] })
           void queryClient.invalidateQueries({ queryKey: ['csv-job', variables.jobId] })
       }
diff --git a/src/features/schools/hooks/useCsvWebSocket.ts b/src/features/schools/hooks/useCsvWebSocket.ts
index 9a8c443..6746ae2 100644
--- a/src/features/schools/hooks/useCsvWebSocket.ts
+++ b/src/features/schools/hooks/useCsvWebSocket.ts
@@ -1,182 +1,169 @@
 import { useCallback, useEffect, useRef, useState } from 'react'
-import { Client } from '@stomp/stompjs'
-import SockJS from 'sockjs-client'
-
-interface CsvImportProgressData {
-  id: string
-  fileName?: string
-  status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED' | 'CANCELLED'
-  totalRecords?: number
-  processedRecords?: number
-  successfulRecords?: number
-  failedRecords?: number
-  progress?: number
-  error?: string
-  createdAt?: string
-  finishedAt?: string
+import { getPreferredConnectionStrategy } from '@/config/websocket'
+import { useConnectionQuality } from './websocket/connectionQuality'
+import { useCleanupResources, useJobSubscription } from './websocket/subscription'
+import { useConnectionFactory } from './websocket/connectionFactory'
+import { calculateReconnectDelay, cleanupGlobalConnections, globalConnectionType, globalStompClient } from './websocket/connectionManager'
+import type { 
+  ConnectionType,
+  CsvImportProgressData,
+  UseCsvWebSocketProps, 
+  UseCsvWebSocketReturn
+} from './websocket/types'
+
+export type { 
+  ConnectionType,
+  CsvImportProgressData,
+  UseCsvWebSocketProps, 
+  UseCsvWebSocketReturn
 }
 
-interface UseCsvWebSocketProps {
-  accessToken: string
-  onProgressUpdate?: (data: CsvImportProgressData) => void
-  _onError?: (error: string) => void
-}
-
-interface UseCsvWebSocketReturn {
-  isConnected: boolean
-  error: string | null
-  subscribe: (jobId: string) => void
-  unsubscribe: (jobId: string) => void
-  disconnect: () => void
-}
+const BASE_RECONNECT_DELAY = 1000
+const CONNECTION_DEBOUNCE_MS = 500
 
 export const useCsvWebSocket = ({
   accessToken,
   onProgressUpdate,
-  _onError
+  onError,
+  preferNativeWebSocket
 }: UseCsvWebSocketProps): UseCsvWebSocketReturn => {
   const [isConnected, setIsConnected] = useState(false)
   const [error, setError] = useState<string | null>(null)
-  const stompClientRef = useRef<Client | null>(null)
+  const [connectionType, setConnectionType] = useState<ConnectionType>(null)
+  const [lastMessageTime, setLastMessageTime] = useState<Date | null>(null)
+  
   const subscribedJobsRef = useRef<Set<string>>(new Set())
-  const subscriptionsRef = useRef<Map<string, any>>(new Map())
-
-  const cleanup = useCallback(() => {
-    subscriptionsRef.current.forEach(subscription => {
-      try {
-        subscription.unsubscribe()
-      } catch {
-        // Silent error handling
-      }
-    })
-    subscriptionsRef.current.clear()
-    
-    if (stompClientRef.current?.connected) {
-      try {
-        stompClientRef.current.deactivate()
-      } catch {
-        // Silent error handling
-      }
-    }
-    
-    setIsConnected(false)
-    setError(null)
+  const connectionAttemptsRef = useRef(0)
+  const connectionTimeoutRef = useRef<NodeJS.Timeout | null>(null)
+  const lastConnectionAttemptRef = useRef<string | null>(null)
+  
+  const preferredStrategy = preferNativeWebSocket ?? (getPreferredConnectionStrategy() === 'native')
+  const { connectionQuality, updateHeartbeat } = useConnectionQuality(isConnected)
+  const { subscriptionsRef, cleanup } = useCleanupResources()
+
+  const getReconnectDelay = useCallback(() => {
+    return calculateReconnectDelay(BASE_RECONNECT_DELAY, connectionAttemptsRef.current)
   }, [])
 
-  const connect = useCallback(() => {
-    if (stompClientRef.current?.connected) {
+  const { subscribeToJob } = useJobSubscription(
+    subscriptionsRef,
+    onProgressUpdate,
+    setLastMessageTime,
+    updateHeartbeat
+  )
+
+  const { connect } = useConnectionFactory({
+    accessToken,
+    onError,
+    updateHeartbeat,
+    subscribeToJob,
+    subscribedJobsRef,
+    connectionAttemptsRef,
+    getReconnectDelay,
+    setIsConnected,
+    setError,
+    setConnectionType
+  })
+
+  const handleConnect = useCallback(async () => {
+    // Evitar m√∫ltiplas tentativas com o mesmo token
+    if (lastConnectionAttemptRef.current === accessToken) {
+      
       return
     }
 
-    cleanup()
-
-    const client = new Client({
-      webSocketFactory: () => new SockJS(`${process.env.VITE_API_URL || 'http://localhost:8080'}/ws`),
-      connectHeaders: {
-        'Authorization': `Bearer ${accessToken}`
-      },
-      debug: () => {
-        // Debug callback - desenvolvimento apenas
-      },
-      reconnectDelay: 5000,
-      heartbeatIncoming: 4000,
-      heartbeatOutgoing: 4000,
-      onConnect: () => {
-        setIsConnected(true)
-        setError(null)
-        
-        // Re-inscrever em jobs ativos
-        subscribedJobsRef.current.forEach(jobId => {
-          subscribeToJob(jobId)
-        })
-      },
-      onStompError: () => {
-        // Erro STOMP
-        setError('Erro STOMP')
-        _onError?.('Erro STOMP')
-      },
-      onWebSocketError: () => {
-        // Erro WebSocket
-        setError('Erro de conex√£o WebSocket')
-        _onError?.('Erro de conex√£o WebSocket')
-      },
-      onDisconnect: () => {
-        // STOMP desconectado
-        setIsConnected(false)
-      }
-    })
+    // Se j√° est√° conectado, n√£o tentar novamente
+    if (globalStompClient?.connected) {
+      setIsConnected(true)
+      setConnectionType(globalConnectionType)
+      return
+    }
 
-    stompClientRef.current = client
-    client.activate()
-  }, [accessToken, _onError, cleanup, onProgressUpdate])
+    lastConnectionAttemptRef.current = accessToken
 
-  const subscribeToJob = useCallback((jobId: string) => {
-    if (!stompClientRef.current?.connected) {
-      return
+    try {
+      await connect(preferredStrategy)
+    } catch (error) {
+      
+      // Reset do controle de tentativas ap√≥s falha
+      lastConnectionAttemptRef.current = null
     }
+  }, [connect, preferredStrategy, accessToken])
 
-    const subscription = stompClientRef.current.subscribe(
-      `/topic/csv-import/${jobId}`,
-      (message) => {
-        try {
-          const data = JSON.parse(message.body)
-          if (data && data.progress === undefined && data.totalRecords && data.processedRecords) {
-            data.progress = Math.floor((data.processedRecords / data.totalRecords) * 100)
-          }
-          onProgressUpdate?.(data)
-        } catch {
-          // Erro ao parsear mensagem - ignorado
-        }
-      }
-    )
+  const debouncedConnect = useCallback(() => {
+    // Limpar timeout anterior
+    if (connectionTimeoutRef.current) {
+      clearTimeout(connectionTimeoutRef.current)
+    }
 
-    subscriptionsRef.current.set(jobId, subscription)
-  }, [onProgressUpdate])
+    // Agendar nova conex√£o com debounce
+    connectionTimeoutRef.current = setTimeout(() => {
+      handleConnect()
+    }, CONNECTION_DEBOUNCE_MS)
+  }, [handleConnect])
 
   const subscribe = useCallback((jobId: string) => {
     subscribedJobsRef.current.add(jobId)
     
-    if (stompClientRef.current?.connected) {
+    if (globalStompClient?.connected) {
       subscribeToJob(jobId)
     } else {
-      connect()
+      debouncedConnect()
     }
-  }, [subscribeToJob, connect])
+  }, [subscribeToJob, debouncedConnect])
+
+  const { unsubscribeFromJob } = useJobSubscription(
+    subscriptionsRef,
+    onProgressUpdate,
+    setLastMessageTime,
+    updateHeartbeat
+  )
 
   const unsubscribe = useCallback((jobId: string) => {
     subscribedJobsRef.current.delete(jobId)
-    
-    const subscription = subscriptionsRef.current.get(jobId)
-    if (subscription) {
-      try {
-        subscription.unsubscribe()
-        subscriptionsRef.current.delete(jobId)
-      } catch {
-        // Silent error handling
-      }
-    }
-  }, [])
+    unsubscribeFromJob(jobId)
+  }, [unsubscribeFromJob])
 
   const disconnect = useCallback(() => {
+    if (connectionTimeoutRef.current) {
+      clearTimeout(connectionTimeoutRef.current)
+      connectionTimeoutRef.current = null
+    }
+    
     subscribedJobsRef.current.clear()
+    connectionAttemptsRef.current = 0
+    lastConnectionAttemptRef.current = null
+    
+    cleanupGlobalConnections()
+    setIsConnected(false)
+    setError(null)
+    setConnectionType(null)
     cleanup()
   }, [cleanup])
 
   useEffect(() => {
-    if (accessToken && accessToken !== 'temp-token') {
-      connect()
+    if (accessToken && accessToken !== 'temp-token' && accessToken.length > 20) {
+      debouncedConnect()
     } else {
       disconnect()
     }
 
-    return cleanup
-  }, [accessToken, connect, disconnect, cleanup])
+    return () => {
+      if (connectionTimeoutRef.current) {
+        clearTimeout(connectionTimeoutRef.current)
+      }
+      cleanup()
+    }
+  }, [accessToken, debouncedConnect, disconnect, cleanup])
 
   return {
     isConnected,
     error,
     subscribe,
     unsubscribe,
-    disconnect
+    disconnect,
+    connectionType,
+    connectionQuality,
+    lastMessageTime
   }
 } 
\ No newline at end of file
diff --git a/src/features/schools/hooks/useSchoolColumns.ts b/src/features/schools/hooks/useSchoolColumns.ts
index 8505728..1d23deb 100644
--- a/src/features/schools/hooks/useSchoolColumns.ts
+++ b/src/features/schools/hooks/useSchoolColumns.ts
@@ -147,7 +147,7 @@ const generateColumnsFromDefinitions = (definitions: ColumnDefinition[]): ColDef
 
     if (columnDef.category === 'metrics') {
       baseColDef.valueGetter = (params: any) => {
-        // Estrutura real dos dados: data.metrics.metrics.CAMPO
+
         const metricsData = params.data?.metrics?.metrics
         const metricsValue = metricsData?.[columnDef.field]
         
diff --git a/src/features/schools/hooks/useSchoolMutations.ts b/src/features/schools/hooks/useSchoolMutations.ts
index 2f3021c..36b203b 100644
--- a/src/features/schools/hooks/useSchoolMutations.ts
+++ b/src/features/schools/hooks/useSchoolMutations.ts
@@ -4,23 +4,63 @@ import { apiClient } from '@/lib/api-client'
 import { useToast } from '@/hooks/useToast'
 import type { School, SchoolCreateRequest, SchoolUpdateRequest } from '@/schemas/schoolSchemas'
 
-export const useCreateSchool = () => {
+const useSchoolQueryInvalidation = () => {
   const queryClient = useQueryClient()
 
+  return {
+    invalidateAll: () => {
+      queryClient.invalidateQueries({ 
+        queryKey: ['schools'],
+        exact: false 
+      })
+      queryClient.invalidateQueries({ queryKey: ['schools-batch'] })
+      queryClient.invalidateQueries({ queryKey: ['school-metrics-list'] })
+      queryClient.invalidateQueries({ queryKey: ['school-columns'] })
+    },
+    invalidateSchool: (code: number) => {
+      queryClient.invalidateQueries({ queryKey: ['school', code] })
+      queryClient.invalidateQueries({ queryKey: ['school-metrics', code] })
+    },
+    removeSchool: (code: number) => {
+      queryClient.removeQueries({ queryKey: ['school', code] })
+      queryClient.removeQueries({ queryKey: ['school-metrics', code] })
+      queryClient.invalidateQueries({ 
+        queryKey: ['schools'],
+        exact: false
+      })
+    }
+  }
+}
+
+export const useCreateSchool = () => {
+  const { invalidateAll } = useSchoolQueryInvalidation()
+  const { success, error } = useToast()
+
   return useApiCreate<School, SchoolCreateRequest>(
     '/schools',
     {
       successMessage: 'Escola criada com sucesso!',
-      onSuccess: () => {
-        queryClient.invalidateQueries({ queryKey: ['schools'] })
+      onSuccess: (newSchool) => {
+        // Invalidar queries para atualizar a tabela
+        invalidateAll()
+        
+        // Notifica√ß√£o adicional com detalhes
+        success(
+          `Escola "${newSchool.schoolName}" (C√≥digo: ${newSchool.code}) criada com sucesso!`,
+          { duration: 4000 }
+        )
+      },
+      onError: (err: any) => {
+        const errorMsg = err.response?.data?.message || err.message || 'Erro ao criar escola'
+        error(`Falha ao criar escola: ${errorMsg}`)
       }
     }
   )
 }
 
 export const useUpdateSchool = () => {
-  const queryClient = useQueryClient()
-  const { success } = useToast()
+  const { invalidateAll, invalidateSchool } = useSchoolQueryInvalidation()
+  const { success, error } = useToast()
 
   return useMutation({
     mutationFn: async ({ code, data }: { code: number; data: SchoolUpdateRequest }) => {
@@ -28,24 +68,43 @@ export const useUpdateSchool = () => {
       return response.data
     },
     onSuccess: (updatedSchool) => {
-      success('Escola atualizada com sucesso!')
-      queryClient.invalidateQueries({ queryKey: ['schools'] })
-      queryClient.invalidateQueries({ queryKey: ['school', updatedSchool.code] })
-      queryClient.invalidateQueries({ queryKey: ['school-metrics', updatedSchool.code] })
+      invalidateSchool(updatedSchool.code)
+      invalidateAll()
+      
+      success(
+        `Escola "${updatedSchool.schoolName}" atualizada com sucesso!`,
+        { duration: 4000 }
+      )
+    },
+    onError: (err: any) => {
+      const errorMsg = err.response?.data?.message || 'Erro ao atualizar escola'
+      error(`Falha ao atualizar escola: ${errorMsg}`)
     }
   })
 }
 
 export const useDeleteSchool = () => {
-  const queryClient = useQueryClient()
+  const { invalidateAll, removeSchool } = useSchoolQueryInvalidation()
+  const { success, error } = useToast()
 
   return useApiDelete<number>(
     (code) => `/schools/${code}`,
     {
       successMessage: 'Escola exclu√≠da com sucesso!',
-      onSuccess: (_deletedResponse, code) => {
-        queryClient.invalidateQueries({ queryKey: ['schools'] })
-        queryClient.removeQueries({ queryKey: ['school', code] })
+      onSuccess: (_, code) => {
+        // Primeiro remover da cache espec√≠fica
+        removeSchool(code)
+        // Depois invalidar todas as listas para garantir atualiza√ß√£o
+        invalidateAll()
+        
+        success(
+          `Escola (C√≥digo: ${code}) exclu√≠da com sucesso!`,
+          { duration: 4000 }
+        )
+      },
+      onError: (err: any) => {
+        const errorMsg = err.response?.data?.message || 'Erro ao excluir escola'
+        error(`Falha ao excluir escola: ${errorMsg}`)
       }
     }
   )
diff --git a/src/features/schools/hooks/useSchoolsGrid.ts b/src/features/schools/hooks/useSchoolsGrid.ts
index 1c757d9..a7db325 100644
--- a/src/features/schools/hooks/useSchoolsGrid.ts
+++ b/src/features/schools/hooks/useSchoolsGrid.ts
@@ -9,6 +9,10 @@ export interface UseSchoolsGridReturn {
   defaultColDef: any
 }
 
+// Constantes para configura√ß√£o da grid
+const DEFAULT_PAGE_SIZE = 50
+const PAGE_SIZE_OPTIONS = [25, 50, 100, 200]
+
 export const useSchoolsGrid = (): UseSchoolsGridReturn => {
   const { columns, defaultColDef } = useSchoolColumns()
 
@@ -18,8 +22,8 @@ export const useSchoolsGrid = (): UseSchoolsGridReturn => {
     
     // Pagina√ß√£o client-side
     pagination: true,
-    paginationPageSize: 50,
-    paginationPageSizeSelector: [25, 50, 100, 200],
+    paginationPageSize: DEFAULT_PAGE_SIZE,
+    paginationPageSizeSelector: PAGE_SIZE_OPTIONS,
     
     // Performance
     suppressColumnVirtualisation: false,
@@ -27,10 +31,12 @@ export const useSchoolsGrid = (): UseSchoolsGridReturn => {
     rowBuffer: 0,
     animateRows: true,
 
-    // Selection - Novo formato do AG Grid 32.2.1+
+    // Selection - Habilitado sele√ß√£o m√∫ltipla com checkboxes
     rowSelection: {
-      mode: 'singleRow',
-      checkboxes: false,
+      mode: 'multiRow',
+      checkboxes: true,
+      headerCheckbox: true,
+      enableClickSelection: true,
     },
     suppressCellFocus: false,
 
@@ -42,10 +48,6 @@ export const useSchoolsGrid = (): UseSchoolsGridReturn => {
     suppressContextMenu: false,
     theme: 'legacy',
 
-    // Loading states
-    loadingOverlayComponent: 'customLoadingOverlay',
-    noRowsOverlayComponent: 'customNoRowsOverlay',
-
     // Accessibility
     suppressMenuHide: false,
     
diff --git a/src/features/schools/hooks/useSchoolsTableController.ts b/src/features/schools/hooks/useSchoolsTableController.ts
index 0d9642b..b2c2dd4 100644
--- a/src/features/schools/hooks/useSchoolsTableController.ts
+++ b/src/features/schools/hooks/useSchoolsTableController.ts
@@ -1,122 +1,43 @@
-import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'
-import {
-  FilterChangedEvent,
-  GridApi,
-  GridOptions,
-  GridReadyEvent,
-  PaginationChangedEvent,
-  RowDataUpdatedEvent,
-  SortChangedEvent
-} from 'ag-grid-community'
+import { useEffect } from 'react'
 import { useSchoolsGrid } from './useSchoolsGrid'
 import { useSchoolsEvents } from './useSchoolsEvents'
 import { useSchoolFilters } from '../store/schoolFilters'
 import { useApiQuery } from '@/hooks/useApiQuery'
+import { useQueryClient } from '@tanstack/react-query'
+import type { UseSchoolsTableControllerProps } from './types/tableController.types'
 import type { PaginatedResponse, School } from '@/schemas/schoolSchemas'
-
-interface UseSchoolsTableControllerProps {
-  onDataChanged?: (data: any) => void
-  onError?: (error: Error) => void
-  onSchoolSelected?: (school: School | null) => void
-  onSchoolDoubleClicked?: (school: School) => void
-}
-
-// Hook auxiliar para os event handlers do grid
-const useGridEventHandlers = (
-  gridApiRef: React.RefObject<GridApi | null>,
-  _setIsRefreshing: (value: boolean) => void,
-  _onError?: (error: Error) => void
-) => {
-  const handleGridReady = useCallback((event: GridReadyEvent) => {
-    gridApiRef.current = event.api
-  }, [gridApiRef])
-
-  const handlePaginationChanged = useCallback((paginationEvent: PaginationChangedEvent) => {
-    void paginationEvent
-  }, [])
-
-  const handleSortChanged = useCallback((sortEvent: SortChangedEvent) => {
-    void sortEvent 
-  }, [])
-
-  const handleFilterChanged = useCallback((filterEvent: FilterChangedEvent) => {
-    void filterEvent
-  }, [])
-
-  const handleRowDataUpdated = useCallback((dataEvent: RowDataUpdatedEvent) => {
-    if (gridApiRef.current) {
-      gridApiRef.current.hideOverlay()
-    }
-    void dataEvent
-  }, [gridApiRef])
-
-  return {
-    handleGridReady,
-    handlePaginationChanged,
-    handleSortChanged,
-    handleFilterChanged,
-    handleRowDataUpdated
-  }
-}
-
-// Hook auxiliar para funcionalidades de exporta√ß√£o
-const useGridExport = (gridApiRef: React.RefObject<GridApi | null>) => {
-  const createExportParams = useCallback((filename?: string) => ({
-    fileName: filename || `escolas_${new Date().toISOString().split('T')[0]}.csv`,
-    columnSeparator: ',',
-    suppressQuotes: false,
-    skipColumnGroupHeaders: false,
-    skipColumnHeaders: false,
-    allColumns: false,
-    onlySelected: false,
-    processCellCallback: (params: any) => {
-      if (typeof params.value === 'string') {
-        return params.value.replace(/"/g, '""')
-      }
-      return params.value
-    }
-  }), [])
-
-  const exportToCsv = useCallback((filename?: string) => {
-    if (!gridApiRef.current) return
-
-    const params = createExportParams(filename)
-    gridApiRef.current.exportDataAsCsv(params)
-  }, [gridApiRef, createExportParams])
-
-  const autoSizeColumns = useCallback(() => {
-    if (!gridApiRef.current) return
-
-    const allColumnIds: string[] = []
-    gridApiRef.current.getColumns()?.forEach(column => {
-      if (column.getColId()) {
-        allColumnIds.push(column.getColId())
-      }
-    })
-
-    gridApiRef.current.autoSizeColumns(allColumnIds, false)
-  }, [gridApiRef])
-
-  return {
-    exportToCsv,
-    autoSizeColumns
-  }
-}
+import {
+  useTableControllerState,
+  useTableEventHandlers,
+  useExportHandlers,
+  useTableActions,
+  useTableGridOptions,
+  type TableControllerReturn
+} from './utils'
 
 export const useSchoolsTableController = ({
-  onDataChanged: _onDataChanged,
+  onDataChanged,
   onError,
   onSchoolSelected,
-  onSchoolDoubleClicked
-}: UseSchoolsTableControllerProps = {}) => {
-  const gridApiRef = useRef<GridApi | null>(null)
-  const [quickFilterText, setQuickFilterText] = useState<string>('')
-  const [isRefreshing, setIsRefreshing] = useState(false)
-
+  onSchoolDoubleClicked,
+  onSelectionChanged
+}: UseSchoolsTableControllerProps = {}): TableControllerReturn => {
+  const queryClient = useQueryClient()
   const { filters } = useSchoolFilters()
   const { gridOptions: baseGridOptions } = useSchoolsGrid()
   
-  // 2) REMOVER cria√ß√µes server-side e adicionar useApiQuery
+  // Estado centralizado
+  const {
+    gridApiRef,
+    quickFilterText,
+    isRefreshing,
+    isGridReady,
+    setQuickFilterText,
+    setIsRefreshing,
+    setIsGridReady
+  } = useTableControllerState()
+  
+  // Query para buscar dados das escolas
   const { data: schoolsResponse, isLoading, error, refetch } = useApiQuery<PaginatedResponse<School>>(
     ['schools', filters],
     '/schools',
@@ -133,6 +54,7 @@ export const useSchoolsTableController = ({
 
   const schoolsData = schoolsResponse?.content ?? []
 
+  // Event handlers das escolas
   const eventHandlers = useSchoolsEvents({ 
     datasource: null,
     onRowSelected: onSchoolSelected || undefined,
@@ -144,33 +66,47 @@ export const useSchoolsTableController = ({
     handlePaginationChanged,
     handleSortChanged,
     handleFilterChanged,
-    handleRowDataUpdated
-  } = useGridEventHandlers(gridApiRef, setIsRefreshing, onError)
+    handleRowDataUpdated,
+    handleSelectionChanged
+  } = useTableEventHandlers({
+    gridApiRef,
+    setIsRefreshing,
+    setIsGridReady,
+    onError,
+    onSelectionChanged
+  })
 
-  // Export functions usando hook auxiliar
-  const { exportToCsv, autoSizeColumns } = useGridExport(gridApiRef)
+  // Handlers de exporta√ß√£o
+  const exportHandlers = useExportHandlers({
+    gridApiRef,
+    isGridReady
+  })
 
-  // 3) REMOVER refer√™ncias a server-side no gridOptions
-  const gridOptions = useMemo((): GridOptions => ({
-    ...baseGridOptions,
-    rowModelType: 'clientSide',
-    rowData: schoolsData,
-    quickFilterText,
-    onGridReady: handleGridReady,
-    onRowSelected: eventHandlers.onRowSelected,
-    onRowDoubleClicked: eventHandlers.onRowDoubleClicked,
-    onCellEditingStopped: eventHandlers.onCellEditingStopped,
-  }), [baseGridOptions, schoolsData, quickFilterText, eventHandlers])
+  // A√ß√µes da tabela
+  const actions = useTableActions({
+    queryClient,
+    filters,
+    refetch,
+    setIsRefreshing,
+    setQuickFilterText
+  })
 
-  const updateQuickFilter = useCallback((text: string) => {
-    setQuickFilterText(text)
-  }, [])
+  // Grid options
+  const gridOptions = useTableGridOptions({
+    baseGridOptions,
+    schoolsData,
+    quickFilterText,
+    handleGridReady,
+    eventHandlers,
+    handleSelectionChanged
+  })
 
-  const refresh = useCallback(() => {
-    refetch()
-  }, [refetch])
+  // Effect para notificar mudan√ßas nos dados
+  useEffect(() => {
+    onDataChanged?.(schoolsData)
+  }, [schoolsData, onDataChanged])
 
-  // 5) Ajustar overlay effect para isLoading e error
+  // Effect para gerenciar overlay do grid
   useEffect(() => {
     if (!gridApiRef.current) return
 
@@ -181,7 +117,7 @@ export const useSchoolsTableController = ({
     } else {
       gridApiRef.current.hideOverlay()
     }
-  }, [isLoading, isRefreshing, error])
+  }, [isLoading, isRefreshing, error, gridApiRef])
 
   return {
     // Grid
@@ -191,12 +127,11 @@ export const useSchoolsTableController = ({
     isLoading,
     error: error?.message ?? null,
     isRefreshing,
+    isGridReady,
     
     // Actions
-    updateQuickFilter,
-    refresh,
-    exportToCsv,
-    autoSizeColumns,
+    ...actions,
+    ...exportHandlers,
     
     // Events
     onGridReady: handleGridReady,
diff --git a/src/features/schools/pages/SchoolsDialogs.tsx b/src/features/schools/pages/SchoolsDialogs.tsx
index 1464db7..3a44099 100644
--- a/src/features/schools/pages/SchoolsDialogs.tsx
+++ b/src/features/schools/pages/SchoolsDialogs.tsx
@@ -20,6 +20,10 @@ interface SchoolsDialogsProps {
   isSchoolDetailOpen: boolean
   setSchoolDetailOpen: (open: boolean) => void
   selectedSchool: School | null
+  onSchoolCreated?: ((school: School) => void) | undefined
+  onSchoolUpdated?: ((school: School) => void) | undefined
+  onSchoolDeleted?: (() => void) | undefined
+  onImportCompleted?: (() => void) | undefined
 }
 
 export const SchoolsDialogs: React.FC<SchoolsDialogsProps> = ({
@@ -36,6 +40,10 @@ export const SchoolsDialogs: React.FC<SchoolsDialogsProps> = ({
   isSchoolDetailOpen,
   setSchoolDetailOpen,
   selectedSchool,
+  onSchoolCreated,
+  onSchoolUpdated,
+  onSchoolDeleted,
+  onImportCompleted,
 }) => (
   <>
     <FilterDialog
@@ -53,12 +61,16 @@ export const SchoolsDialogs: React.FC<SchoolsDialogsProps> = ({
     <ImportDialog
       open={isImportDialogOpen}
       onClose={() => setImportDialogOpen(false)}
+      onImportCompleted={onImportCompleted}
     />
 
     <SchoolFormDialog
       open={isSchoolFormOpen}
       onClose={() => setSchoolFormOpen(false)}
       selectedSchool={selectedSchool}
+      onSchoolCreated={onSchoolCreated}
+      onSchoolUpdated={onSchoolUpdated}
+      onSchoolDeleted={onSchoolDeleted}
     />
 
     <SchoolDetailDialog
diff --git a/src/features/schools/pages/SchoolsHeader.tsx b/src/features/schools/pages/SchoolsHeader.tsx
index fe7e0b2..28e2b57 100644
--- a/src/features/schools/pages/SchoolsHeader.tsx
+++ b/src/features/schools/pages/SchoolsHeader.tsx
@@ -1,35 +1,33 @@
 import React from 'react'
 import {
-  Box,
-  Button,
-  Chip,
-  IconButton,
   Paper,
   Stack,
-  Tooltip,
   Typography,
 } from '@mui/material'
-import {
-  Add as AddIcon,
-  Api as ApiIcon,
-  Download as ExportIcon,
-  Storage as FallbackIcon,
-  FilterList as FilterIcon,
-  CloudUpload as ImportIcon,
-} from '@mui/icons-material'
-import { useSchoolFilters } from '../store/schoolFilters'
+import { 
+  DesktopActions, 
+  MobileActions, 
+  HeaderMetrics, 
+  ActiveFilters 
+} from '../components/header'
+import { useSchoolsHeader } from '../hooks/useSchoolsHeader'
 
 interface SchoolsHeaderProps {
   title: string
   totalColumns: number
   isLoadingColumns: boolean
   metricsSource: 'api' | 'local'
-  apiError?: Error | null
+  apiError: string | null
   onExport: () => void
+  onExportSelected: () => void
+  onExportAllColumns: () => void
   onOpenFilterDialog: () => void
   onOpenColumnsDialog: () => void
   onOpenImportDialog: () => void
   onNewSchool: () => void
+  totalRowsCount?: number
+  selectedRowsCount?: number
+  isLoading?: boolean
 }
 
 export const SchoolsHeader: React.FC<SchoolsHeaderProps> = ({
@@ -39,96 +37,64 @@ export const SchoolsHeader: React.FC<SchoolsHeaderProps> = ({
   metricsSource,
   apiError,
   onExport,
+  onExportSelected,
+  onExportAllColumns,
   onOpenFilterDialog,
   onOpenColumnsDialog: onOpenColumnsDialogHandler,
   onOpenImportDialog,
   onNewSchool,
+  totalRowsCount = 0,
+  selectedRowsCount = 0,
+  isLoading = false,
 }) => {
-  const { filters, clear } = useSchoolFilters()
-  const hasFilters = Object.keys(filters).length > 0
-
   void onOpenColumnsDialogHandler
 
-  const getMetricsTooltipText = () => {
-    if (metricsSource === 'api') {
-      return 'M√©tricas carregadas da API'
-    }
-    if (apiError) {
-      return 'Erro na API - usando dados locais'
-    }
-    return 'Usando m√©tricas padr√£o'
-  }
+  const { filters, isSmallScreen, actionProps, clearFilters } = useSchoolsHeader({
+    totalRowsCount,
+    selectedRowsCount,
+    isLoading,
+    onExport,
+    onExportSelected,
+    onExportAllColumns,
+    onOpenFilterDialog,
+    onOpenImportDialog,
+    onNewSchool,
+  })
 
   return (
     <Paper elevation={1} sx={{ p: 2, mb: 2, borderRadius: 0 }}>
-      <Stack direction="row" justifyContent="space-between" alignItems="center">
-        <Stack direction="row" alignItems="center" spacing={2}>
-          <Typography variant="h4" component="h1" fontWeight="bold">
+      <Stack 
+        direction={{ xs: 'column', sm: 'row' }} 
+        justifyContent="space-between" 
+        alignItems={{ xs: 'flex-start', sm: 'center' }}
+        spacing={{ xs: 2, sm: 0 }}
+      >
+        {/* T√≠tulo e m√©tricas */}
+        <Stack direction="row" alignItems="center" spacing={2} sx={{ width: { xs: '100%', sm: 'auto' } }}>
+          <Typography variant={isSmallScreen ? "h5" : "h4"} component="h1" fontWeight="bold">
             {title}
           </Typography>
-          {/* Status das colunas */}
-          <Stack direction="row" spacing={1}>
-            <Chip
-              size="small"
-              label={`${totalColumns} colunas`}
-              color="primary"
-              variant="outlined"
-            />
-            <Tooltip title={getMetricsTooltipText()}>
-              <Chip
-                size="small"
-                icon={metricsSource === 'api' ? <ApiIcon /> : <FallbackIcon />}
-                label={metricsSource === 'api' ? 'API' : 'Local'}
-                color={metricsSource === 'api' ? 'success' : 'warning'}
-                variant="outlined"
-              />
-            </Tooltip>
-            {isLoadingColumns && (
-              <Chip size="small" label="Carregando..." color="info" variant="outlined" />
-            )}
-          </Stack>
-        </Stack>
-        <Stack direction="row" spacing={1}>
-          <Tooltip title="Exportar">
-            <IconButton onClick={onExport} color="primary">
-              <ExportIcon />
-            </IconButton>
-          </Tooltip>
-          <Tooltip title="Filtros">
-            <IconButton onClick={onOpenFilterDialog} color={hasFilters ? 'secondary' : 'primary'}>
-              <FilterIcon />
-            </IconButton>
-          </Tooltip>
-          <Button variant="outlined" startIcon={<ImportIcon />} onClick={onOpenImportDialog} sx={{ ml: 1 }}>
-            Importar CSV
-          </Button>
-          <Button variant="contained" startIcon={<AddIcon />} onClick={onNewSchool} sx={{ ml: 1 }}>
-            Nova Escola
-          </Button>
+          <HeaderMetrics
+            totalColumns={totalColumns}
+            isLoadingColumns={isLoadingColumns}
+            metricsSource={metricsSource}
+            apiError={apiError}
+            totalRowsCount={totalRowsCount}
+            selectedRowsCount={selectedRowsCount}
+            isLoading={isLoading}
+          />
         </Stack>
+
+        {/* Bot√µes de a√ß√£o - responsivos */}
+        {isSmallScreen ? (
+          <MobileActions {...actionProps} />
+        ) : (
+          <DesktopActions {...actionProps} />
+        )}
       </Stack>
-      {/* Filtros r√°pidos */}
-      {hasFilters && (
-        <Box sx={{ mt: 2 }}>
-          <Stack direction="row" spacing={1} alignItems="center" flexWrap="wrap">
-            <Typography variant="body2" color="text.secondary">
-              Filtros ativos:
-            </Typography>
-            {filters.name && (
-              <Chip size="small" label={`Nome: ${filters.name}`} variant="outlined" />
-            )}
-            {filters.municipalityName && (
-              <Chip size="small" label={`Munic√≠pio: ${filters.municipalityName}`} variant="outlined" />
-            )}
-            {filters.stateAbbreviation && (
-              <Chip size="small" label={`UF: ${filters.stateAbbreviation}`} variant="outlined" />
-            )}
-            <Button size="small" variant="text" onClick={clear}>
-              Limpar filtros
-            </Button>
-          </Stack>
-        </Box>
-      )}
+
+      {/* Filtros ativos */}
+      <ActiveFilters filters={filters} onClearFilters={clearFilters} />
     </Paper>
   )
 } 
\ No newline at end of file
diff --git a/src/features/schools/pages/SchoolsPage.tsx b/src/features/schools/pages/SchoolsPage.tsx
index 974aeb1..f763a60 100644
--- a/src/features/schools/pages/SchoolsPage.tsx
+++ b/src/features/schools/pages/SchoolsPage.tsx
@@ -1,4 +1,4 @@
-import React, { useCallback, useState } from 'react'
+import React from 'react'
 import {
   Box,
   Fab,
@@ -8,50 +8,53 @@ import { Edit as EditIcon } from '@mui/icons-material'
 import { SchoolsHeader } from './SchoolsHeader'
 import { SchoolsTableContainer } from '../components/SchoolsTableContainer'
 import { SchoolsDialogs } from './SchoolsDialogs'
-import { useSchoolColumns } from '../hooks/useSchoolColumns'
-import type { School } from '@/schemas/schoolSchemas'
-import { useSchoolsTableController } from '../hooks'
-
-interface SchoolsPageProps {
-  title?: string
-}
+import { type SchoolsPageProps, useSchoolsPageState } from './utils'
 
 export const SchoolsPage: React.FC<SchoolsPageProps> = ({
   title = 'Gest√£o de Escolas'
 }) => {
-  const [selectedSchool, setSelectedSchool] = useState<School | null>(null)
-  const [isFilterDialogOpen, setIsFilterDialogOpen] = useState(false)
-  const [isColumnsDialogOpen, setIsColumnsDialogOpen] = useState(false)
-  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false)
-  const [isSchoolFormOpen, setIsSchoolFormOpen] = useState(false)
-  const [isSchoolDetailOpen, setIsSchoolDetailOpen] = useState(false)
-
-  const { totalColumns, isLoadingColumns, metricsSource, apiError } = useSchoolColumns()
-  const { exportToCsv } = useSchoolsTableController()
-
-  const handleNewSchool = useCallback(() => {
-    setSelectedSchool(null)
-    setIsSchoolFormOpen(true)
-  }, [])
-
-  const handleEditSchool = useCallback(() => {
-    if (selectedSchool) {
-      setIsSchoolFormOpen(true)
-    }
-  }, [selectedSchool])
-
-  const handleSchoolSelected = useCallback((school: School | null) => {
-    setSelectedSchool(school)
-  }, [])
-
-  const handleSchoolDoubleClicked = useCallback((school: School) => {
-    setSelectedSchool(school)
-    setIsSchoolFormOpen(true)
-  }, [])
-
-  const handleExport = useCallback(() => {
-    exportToCsv(`escolas-${new Date().toISOString().split('T')[0]}.csv`)
-  }, [exportToCsv])
+  const {
+    // Estados
+    selectedSchool,
+    selectedRowsCount,
+    totalRowsCount,
+    dialogStates,
+    setDialogStates,
+    
+    // Dados externos
+    totalColumns,
+    isLoadingColumns,
+    metricsSource,
+    apiError,
+    isLoading,
+    
+    // Refs
+    tableRef,
+    
+    // Handlers CRUD
+    handleSchoolCreated,
+    handleSchoolUpdated,
+    handleSchoolDeleted,
+    handleImportCompleted,
+    
+    // Handlers de Di√°logos
+    handleNewSchool,
+    handleEditSchool,
+    handleSchoolSelected,
+    handleSchoolDoubleClicked,
+    handleOpenFilterDialog,
+    handleOpenColumnsDialog,
+    handleOpenImportDialog,
+    
+    // Handlers de Exporta√ß√£o
+    handleExport,
+    handleExportSelected,
+    handleExportAllColumns,
+    
+    // Handlers de Dados
+    handleDataChanged,
+    handleSelectionChanged
+  } = useSchoolsPageState()
 
   return (
     <Box sx={{ height: '100vh', display: 'flex', flexDirection: 'column', p: 3 }}>
@@ -60,18 +63,26 @@ export const SchoolsPage: React.FC<SchoolsPageProps> = ({
         totalColumns={totalColumns}
         isLoadingColumns={isLoadingColumns}
         metricsSource={metricsSource as any}
-        apiError={apiError}
+        apiError={apiError?.message || null}
         onExport={handleExport}
-        onOpenFilterDialog={() => setIsFilterDialogOpen(true)}
-        onOpenColumnsDialog={() => setIsColumnsDialogOpen(true)}
-        onOpenImportDialog={() => setIsImportDialogOpen(true)}
+        onExportSelected={handleExportSelected}
+        onExportAllColumns={handleExportAllColumns}
+        onOpenFilterDialog={handleOpenFilterDialog}
+        onOpenColumnsDialog={handleOpenColumnsDialog}
+        onOpenImportDialog={handleOpenImportDialog}
         onNewSchool={handleNewSchool}
+        totalRowsCount={totalRowsCount}
+        selectedRowsCount={selectedRowsCount}
+        isLoading={isLoading}
       />
 
       <Paper elevation={1} sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
         <SchoolsTableContainer 
+          ref={tableRef}
+          onDataChanged={handleDataChanged}
           onSchoolSelected={handleSchoolSelected}
           onSchoolDoubleClicked={handleSchoolDoubleClicked}
+          onSelectionChanged={handleSelectionChanged}
         />
       </Paper>
 
@@ -88,17 +99,21 @@ export const SchoolsPage: React.FC<SchoolsPageProps> = ({
       <SchoolsDialogs
         totalColumns={totalColumns}
         metricsSource={metricsSource as any}
-        isFilterDialogOpen={isFilterDialogOpen}
-        setFilterDialogOpen={setIsFilterDialogOpen}
-        isColumnsDialogOpen={isColumnsDialogOpen}
-        setColumnsDialogOpen={setIsColumnsDialogOpen}
-        isImportDialogOpen={isImportDialogOpen}
-        setImportDialogOpen={setIsImportDialogOpen}
-        isSchoolFormOpen={isSchoolFormOpen}
-        setSchoolFormOpen={setIsSchoolFormOpen}
-        isSchoolDetailOpen={isSchoolDetailOpen}
-        setSchoolDetailOpen={setIsSchoolDetailOpen}
+        isFilterDialogOpen={dialogStates.isFilterDialogOpen}
+        setFilterDialogOpen={(open) => setDialogStates(prev => ({ ...prev, isFilterDialogOpen: open }))}
+        isColumnsDialogOpen={dialogStates.isColumnsDialogOpen}
+        setColumnsDialogOpen={(open) => setDialogStates(prev => ({ ...prev, isColumnsDialogOpen: open }))}
+        isImportDialogOpen={dialogStates.isImportDialogOpen}
+        setImportDialogOpen={(open) => setDialogStates(prev => ({ ...prev, isImportDialogOpen: open }))}
+        isSchoolFormOpen={dialogStates.isSchoolFormOpen}
+        setSchoolFormOpen={(open) => setDialogStates(prev => ({ ...prev, isSchoolFormOpen: open }))}
+        isSchoolDetailOpen={dialogStates.isSchoolDetailOpen}
+        setSchoolDetailOpen={(open) => setDialogStates(prev => ({ ...prev, isSchoolDetailOpen: open }))}
         selectedSchool={selectedSchool}
+        onSchoolCreated={handleSchoolCreated}
+        onSchoolUpdated={handleSchoolUpdated}
+        onSchoolDeleted={handleSchoolDeleted}
+        onImportCompleted={handleImportCompleted}
       />
     </Box>
   )
diff --git a/src/handlers/successHandler.ts b/src/handlers/successHandler.ts
index b7896bc..5021c4c 100644
--- a/src/handlers/successHandler.ts
+++ b/src/handlers/successHandler.ts
@@ -1,5 +1,4 @@
 import { QueryKey, useQueryClient } from '@tanstack/react-query'
-import { showSuccessToast } from '@/utils/toast'
 import { useToast } from '@/hooks/useToast'
 
 /**
@@ -7,8 +6,6 @@ import { useToast } from '@/hooks/useToast'
  */
 export class SuccessHandler {
   public static createMutationSuccessHandler<TData, TVariables>(
-    method: string,
-    url: string,
     options: {
       queryClient: ReturnType<typeof useQueryClient>
       invalidateQueries: QueryKey[]
@@ -25,7 +22,6 @@ export class SuccessHandler {
         options.successMessage, 
         options.toastService
       )
-      this.logSuccess(method, url)
       
       if (options.onSuccess) {
         options.onSuccess(data, variables, context)
@@ -54,12 +50,4 @@ export class SuccessHandler {
       }
     }
   }
-
-  private static logSuccess(method: string, _url: string): void {
-    try {
-      showSuccessToast(`${method} realizado com sucesso`)
-    } catch {
-      // Toast n√£o dispon√≠vel
-    }
-  }
 } 
\ No newline at end of file
diff --git a/src/hooks/__tests__/etapa3-mutation-factory.test.tsx b/src/hooks/__tests__/etapa3-mutation-factory.test.tsx
index abd149b..e3292d8 100644
--- a/src/hooks/__tests__/etapa3-mutation-factory.test.tsx
+++ b/src/hooks/__tests__/etapa3-mutation-factory.test.tsx
@@ -254,8 +254,6 @@ describe('ETAPA 3 - Mutation Factory', () => {
       })
 
       expect(SuccessHandler.createMutationSuccessHandler).toHaveBeenCalledWith(
-        'POST',
-        '/api/test',
         expect.objectContaining({
           queryClient,
           invalidateQueries: [['posts'], ['users']],
@@ -311,8 +309,6 @@ describe('ETAPA 3 - Mutation Factory', () => {
       })
 
       expect(SuccessHandler.createMutationSuccessHandler).toHaveBeenCalledWith(
-        'POST',
-        '/api/test',
         expect.objectContaining({
           showSuccess: false
         })
@@ -330,8 +326,6 @@ describe('ETAPA 3 - Mutation Factory', () => {
       })
 
       expect(SuccessHandler.createMutationSuccessHandler).toHaveBeenCalledWith(
-        'DELETE',
-        '/api/test/1',
         expect.objectContaining({
           successMessage: 'Item removido com sucesso!'
         })
diff --git a/src/hooks/__tests__/queryKeys.optimization.test.ts b/src/hooks/__tests__/queryKeys.optimization.test.ts
index a25176b..2aaa2f1 100644
--- a/src/hooks/__tests__/queryKeys.optimization.test.ts
+++ b/src/hooks/__tests__/queryKeys.optimization.test.ts
@@ -216,11 +216,6 @@ describe('ETAPA 5: Otimiza√ß√£o de createQueryKeys', () => {
       const endWithCache = performance.now()
       const timeWithCache = endWithCache - startWithCache
       
-      // O cache pode n√£o ser significativamente mais r√°pido em opera√ß√µes simples
-      // mas deve mostrar pelo menos alguma melhoria
-      console.log(`‚è±Ô∏è  Sem cache: ${timeWithoutCache.toFixed(2)}ms`)
-      console.log(`‚ö° Com cache: ${timeWithCache.toFixed(2)}ms`)
-      
       // Teste mais flex√≠vel: cache deve ser pelo menos igual ou melhor
       expect(timeWithCache).toBeLessThanOrEqual(timeWithoutCache * 1.1) // 10% de toler√¢ncia
     })
@@ -255,13 +250,11 @@ describe('ETAPA 5: Otimiza√ß√£o de createQueryKeys', () => {
       // Verificar que muitas s√£o iguais (cachadas)
       const uniqueWithCache = new Set(allocationsWithCache)
       
-      console.log(`üîç Sem cache: ${uniqueWithoutCache.size} objetos √∫nicos`)
-      console.log(`‚ö° Com cache: ${uniqueWithCache.size} objetos √∫nicos`)
+      
+      
       
       // CRIT√âRIO DA ETAPA 5: ‚â• 20% menos aloca√ß√µes
       const reduction = ((uniqueWithoutCache.size - uniqueWithCache.size) / uniqueWithoutCache.size) * 100
-      console.log(`üìâ Redu√ß√£o de aloca√ß√µes: ${reduction.toFixed(1)}%`)
-      
       expect(reduction).toBeGreaterThanOrEqual(20)
     })
   })
diff --git a/src/hooks/useAuth.ts b/src/hooks/useAuth.ts
index bcf7c37..3b9c5f4 100644
--- a/src/hooks/useAuth.ts
+++ b/src/hooks/useAuth.ts
@@ -186,6 +186,24 @@ export const useResetPassword = () => {
   })
 }
 
+/**
+ * Hook para verificar email
+ */
+export const useVerifyEmail = (token?: string) => {
+  return useApiQuery(
+    authKeys.detail(`verify-email-${token}`),
+    `/auth/verify?token=${token}`,
+    {},
+    {
+      enabled: !!token && token.length > 0,
+      retry: false,
+      staleTime: 0,
+      refetchOnWindowFocus: false,
+      showErrorToast: false,
+    }
+  )
+}
+
 /**
  * Hook composto para o fluxo de reset de senha
  */
diff --git a/src/pages/Dashboard.tsx b/src/pages/Dashboard.tsx
index afaf7b3..a69cdc9 100644
--- a/src/pages/Dashboard.tsx
+++ b/src/pages/Dashboard.tsx
@@ -1,483 +1,2 @@
-import { Avatar, Box, Button, Card, CardContent, Chip, Container, Divider, IconButton, List, ListItem, ListItemAvatar, ListItemText, Paper, Stack, Typography } from '@mui/material'
-import { motion } from 'framer-motion'
-import { useNavigate } from '@tanstack/react-router'
-import { 
-  Assessment as AssessmentIcon, 
-  Assignment as AssignmentIcon,
-  CheckCircle as CheckCircleIcon,
-  FileDownload as FileDownloadIcon,
-  NotificationsActive as NotificationIcon,
-  People as PeopleIcon,
-  PieChart as PieChartIcon,
-  Refresh as RefreshIcon,
-  Schedule as ScheduleIcon,
-  School as SchoolIcon,
-  Speed as SpeedIcon,
-  TableView as TableIcon,
-  TrendingUp as TrendingUpIcon,
-  Warning as WarningIcon
-} from '@mui/icons-material'
-import { useToast } from '@/hooks/useToast'
-
-export function Dashboard() {
-  const navigate = useNavigate()
-  const toast = useToast()
-
-  const handleViewTable = () => {
-    navigate({ to: '/schools' })
-  }
-
-  const handleTestToasts = () => {
-    toast.success('Login realizado com sucesso!')
-    
-    setTimeout(() => {
-      toast.info('Sistema carregado completamente')
-    }, 1000)
-    
-    setTimeout(() => {
-      toast.warning('Lembre-se de salvar suas altera√ß√µes')
-    }, 2000)
-  }
-
-  const handleRefreshData = () => {
-    toast.info('Atualizando dados do sistema...')
-  }
-
-  const handleExportData = () => {
-    toast.success('Iniciando exporta√ß√£o de dados...')
-  }
-
-  // Dados mock para demonstra√ß√£o
-  const metrics = [
-    { title: 'Total de Escolas', value: '1.247', change: '+12%', icon: SchoolIcon, color: '#3b82f6' },
-    { title: 'Estudantes Ativos', value: '89.432', change: '+8%', icon: PeopleIcon, color: '#10b981' },
-    { title: 'Taxa de Aprova√ß√£o', value: '94.2%', change: '+2.1%', icon: TrendingUpIcon, color: '#8b5cf6' },
-    { title: 'Relat√≥rios Gerados', value: '156', change: '+25%', icon: AssessmentIcon, color: '#f59e0b' },
-  ]
-
-  const recentActivities = [
-    { title: 'Nova escola cadastrada', subtitle: 'Escola Municipal S√£o Jos√©', time: '2 min atr√°s', type: 'success' },
-    { title: 'Relat√≥rio gerado', subtitle: 'Relat√≥rio mensal de desempenho', time: '15 min atr√°s', type: 'info' },
-    { title: 'Atualiza√ß√£o de dados', subtitle: '1.200 registros atualizados', time: '1 hora atr√°s', type: 'warning' },
-    { title: 'Backup realizado', subtitle: 'Backup autom√°tico conclu√≠do', time: '2 horas atr√°s', type: 'success' },
-    { title: 'Usu√°rio conectado', subtitle: 'Admin Jo√£o Silva fez login', time: '3 horas atr√°s', type: 'info' },
-  ]
-
-  const quickStats = [
-    { label: 'Escolas P√∫blicas', value: 892, total: 1247 },
-    { label: 'Escolas Privadas', value: 355, total: 1247 },
-    { label: 'Ensino Fundamental', value: 745, total: 1247 },
-    { label: 'Ensino M√©dio', value: 502, total: 1247 },
-  ]
-
-  return (
-    <Box
-      sx={{
-        minHeight: '100vh',
-        background: 'linear-gradient(135deg, #0f172a 0%, #1e3a8a 50%, #581c87 100%)',
-        py: 4
-      }}
-    >
-      <Container maxWidth="xl">
-        <motion.div
-          initial={{ opacity: 0, y: 30 }}
-          animate={{ opacity: 1, y: 0 }}
-          transition={{ duration: 0.6 }}
-        >
-          {/* Header */}
-          <Paper
-            sx={{
-              p: 4,
-              mb: 4,
-              background: 'rgba(15, 23, 42, 0.7)',
-              backdropFilter: 'blur(20px)',
-              border: '1px solid rgba(255, 255, 255, 0.1)',
-              borderRadius: 0,
-              color: 'white'
-            }}
-          >
-            <Stack direction="row" justifyContent="space-between" alignItems="center">
-              <Box>
-                <Typography variant="h3" component="h1" gutterBottom>
-                  Dashboard
-                </Typography>
-                <Typography variant="h6" color="rgba(255, 255, 255, 0.7)">
-                  Bem-vindo ao sistema! Vis√£o geral do desempenho educacional.
-                </Typography>
-              </Box>
-              
-              <Stack direction="row" spacing={2}>
-                <IconButton
-                  onClick={handleRefreshData}
-                  sx={{
-                    color: 'white',
-                    backgroundColor: 'rgba(255, 255, 255, 0.1)',
-                    '&:hover': {
-                      backgroundColor: 'rgba(255, 255, 255, 0.2)',
-                    }
-                  }}
-                >
-                  <RefreshIcon />
-                </IconButton>
-                <IconButton
-                  onClick={handleExportData}
-                  sx={{
-                    color: 'white',
-                    backgroundColor: 'rgba(255, 255, 255, 0.1)',
-                    '&:hover': {
-                      backgroundColor: 'rgba(255, 255, 255, 0.2)',
-                    }
-                  }}
-                >
-                  <FileDownloadIcon />
-                </IconButton>
-              </Stack>
-            </Stack>
-          </Paper>
-
-          <Stack spacing={4}>
-            {/* M√©tricas Principais */}
-            <Box>
-              <Box
-                sx={{
-                  display: 'grid',
-                  gridTemplateColumns: {
-                    xs: '1fr',
-                    sm: 'repeat(2, 1fr)',
-                    md: 'repeat(4, 1fr)'
-                  },
-                  gap: 3
-                }}
-              >
-                {metrics.map((metric, index) => (
-                  <motion.div
-                    key={metric.title}
-                    initial={{ opacity: 0, y: 20 }}
-                    animate={{ opacity: 1, y: 0 }}
-                    transition={{ duration: 0.5, delay: index * 0.1 }}
-                  >
-                    <Card
-                      sx={{
-                        background: 'rgba(255, 255, 255, 0.05)',
-                        backdropFilter: 'blur(10px)',
-                        border: '1px solid rgba(255, 255, 255, 0.1)',
-                        borderRadius: 0,
-                        color: 'white',
-                        '&:hover': {
-                          transform: 'translateY(-4px)',
-                          boxShadow: '0 8px 25px rgba(0, 0, 0, 0.3)',
-                        },
-                        transition: 'all 0.3s ease'
-                      }}
-                    >
-                      <CardContent sx={{ p: 3 }}>
-                        <Stack direction="row" alignItems="center" spacing={2}>
-                          <Box
-                            sx={{
-                              p: 1.5,
-                              borderRadius: '12px',
-                              backgroundColor: `${metric.color}20`,
-                              border: `1px solid ${metric.color}40`,
-                            }}
-                          >
-                            <metric.icon sx={{ color: metric.color, fontSize: 24 }} />
-                          </Box>
-                          <Box flex={1}>
-                            <Typography variant="body2" color="rgba(255, 255, 255, 0.7)">
-                              {metric.title}
-                            </Typography>
-                            <Typography variant="h4" fontWeight="bold">
-                              {metric.value}
-                            </Typography>
-                            <Chip
-                              label={metric.change}
-                              size="small"
-                              sx={{
-                                backgroundColor: '#10b98120',
-                                color: '#10b981',
-                                border: '1px solid #10b98140',
-                                mt: 1
-                              }}
-                            />
-                          </Box>
-                        </Stack>
-                      </CardContent>
-                    </Card>
-                  </motion.div>
-                ))}
-              </Box>
-            </Box>
-
-            {/* Conte√∫do Principal */}
-            <Box
-              sx={{
-                display: 'grid',
-                gridTemplateColumns: {
-                  xs: '1fr',
-                  md: '2fr 1fr'
-                },
-                gap: 4
-              }}
-            >
-              {/* A√ß√µes R√°pidas */}
-              <Card
-                sx={{
-                  background: 'rgba(255, 255, 255, 0.05)',
-                  backdropFilter: 'blur(10px)',
-                  border: '1px solid rgba(255, 255, 255, 0.1)',
-                  borderRadius: 0,
-                  color: 'white'
-                }}
-              >
-                <CardContent sx={{ p: 3 }}>
-                  <Typography variant="h5" gutterBottom sx={{ mb: 3 }}>
-                    A√ß√µes R√°pidas
-                  </Typography>
-                  
-                  <Box
-                    sx={{
-                      display: 'grid',
-                      gridTemplateColumns: {
-                        xs: '1fr',
-                        sm: 'repeat(2, 1fr)'
-                      },
-                      gap: 2
-                    }}
-                  >
-                    <Button
-                      variant="contained"
-                      size="large"
-                      fullWidth
-                      startIcon={<TableIcon />}
-                      onClick={handleViewTable}
-                      sx={{
-                        backgroundColor: 'rgba(59, 130, 246, 0.8)',
-                        backdropFilter: 'blur(10px)',
-                        border: '1px solid rgba(59, 130, 246, 0.3)',
-                        borderRadius: 0,
-                        color: 'white',
-                        py: 2,
-                        '&:hover': {
-                          backgroundColor: 'rgba(59, 130, 246, 1)',
-                          transform: 'translateY(-2px)',
-                          boxShadow: '0 8px 25px rgba(59, 130, 246, 0.3)',
-                        },
-                        transition: 'all 0.3s ease'
-                      }}
-                    >
-                      Visualizar Tabela de Escolas
-                    </Button>
-                    
-                    <Button
-                      variant="outlined"
-                      size="large"
-                      fullWidth
-                      startIcon={<NotificationIcon />}
-                      onClick={handleTestToasts}
-                      sx={{
-                        borderColor: 'rgba(255, 255, 255, 0.3)',
-                        color: 'white',
-                        borderRadius: 0,
-                        py: 2,
-                        '&:hover': {
-                          borderColor: 'rgba(255, 255, 255, 0.5)',
-                          backgroundColor: 'rgba(255, 255, 255, 0.1)',
-                          transform: 'translateY(-2px)',
-                        },
-                        transition: 'all 0.3s ease'
-                      }}
-                    >
-                      Testar Notifica√ß√µes
-                    </Button>
-                    
-                    <Button
-                      variant="outlined"
-                      size="large"
-                      fullWidth
-                      startIcon={<AssessmentIcon />}
-                      sx={{
-                        borderColor: 'rgba(139, 92, 246, 0.5)',
-                        color: '#a78bfa',
-                        borderRadius: 0,
-                        py: 2,
-                        '&:hover': {
-                          borderColor: 'rgba(139, 92, 246, 0.8)',
-                          backgroundColor: 'rgba(139, 92, 246, 0.1)',
-                          transform: 'translateY(-2px)',
-                        },
-                        transition: 'all 0.3s ease'
-                      }}
-                    >
-                      Gerar Relat√≥rio
-                    </Button>
-                    
-                    <Button
-                      variant="outlined"
-                      size="large"
-                      fullWidth
-                      startIcon={<PieChartIcon />}
-                      sx={{
-                        borderColor: 'rgba(16, 185, 129, 0.5)',
-                        color: '#6ee7b7',
-                        borderRadius: 0,
-                        py: 2,
-                        '&:hover': {
-                          borderColor: 'rgba(16, 185, 129, 0.8)',
-                          backgroundColor: 'rgba(16, 185, 129, 0.1)',
-                          transform: 'translateY(-2px)',
-                        },
-                        transition: 'all 0.3s ease'
-                      }}
-                    >
-                      Ver Analytics
-                    </Button>
-                  </Box>
-                </CardContent>
-              </Card>
-
-              {/* Estat√≠sticas R√°pidas */}
-              <Card
-                sx={{
-                  background: 'rgba(255, 255, 255, 0.05)',
-                  backdropFilter: 'blur(10px)',
-                  border: '1px solid rgba(255, 255, 255, 0.1)',
-                  borderRadius: 0,
-                  color: 'white'
-                }}
-              >
-                <CardContent sx={{ p: 3 }}>
-                  <Typography variant="h5" gutterBottom sx={{ mb: 3 }}>
-                    Distribui√ß√£o de Escolas
-                  </Typography>
-                  
-                  <Stack spacing={2}>
-                    {quickStats.map((stat, index) => (
-                      <Box key={stat.label}>
-                        <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 1 }}>
-                          <Typography variant="body2" color="rgba(255, 255, 255, 0.8)">
-                            {stat.label}
-                          </Typography>
-                          <Typography variant="body2" fontWeight="bold">
-                            {stat.value}
-                          </Typography>
-                        </Stack>
-                        <Box
-                          sx={{
-                            width: '100%',
-                            height: 6,
-                            backgroundColor: 'rgba(255, 255, 255, 0.1)',
-                            borderRadius: 3,
-                            overflow: 'hidden'
-                          }}
-                        >
-                          <motion.div
-                            initial={{ width: 0 }}
-                            animate={{ width: `${(stat.value / stat.total) * 100}%` }}
-                            transition={{ duration: 1, delay: index * 0.2 }}
-                            style={{
-                              height: '100%',
-                              background: `linear-gradient(90deg, #3b82f6, #8b5cf6)`,
-                              borderRadius: 3
-                            }}
-                          />
-                        </Box>
-                      </Box>
-                    ))}
-                  </Stack>
-                </CardContent>
-              </Card>
-            </Box>
-
-            {/* Atividades Recentes */}
-            <Card
-              sx={{
-                background: 'rgba(255, 255, 255, 0.05)',
-                backdropFilter: 'blur(10px)',
-                border: '1px solid rgba(255, 255, 255, 0.1)',
-                borderRadius: 0,
-                color: 'white'
-              }}
-            >
-              <CardContent sx={{ p: 3 }}>
-                <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 3 }}>
-                  <Typography variant="h5">
-                    Atividades Recentes
-                  </Typography>
-                  <Chip
-                    icon={<SpeedIcon />}
-                    label="Tempo Real"
-                    size="small"
-                    sx={{
-                      backgroundColor: '#10b98120',
-                      color: '#10b981',
-                      border: '1px solid #10b98140'
-                    }}
-                  />
-                </Stack>
-                
-                <List sx={{ p: 0 }}>
-                  {recentActivities.map((activity, index) => (
-                    <motion.div
-                      key={index}
-                      initial={{ opacity: 0, x: -20 }}
-                      animate={{ opacity: 1, x: 0 }}
-                      transition={{ duration: 0.5, delay: index * 0.1 }}
-                    >
-                      <ListItem
-                        sx={{
-                          px: 0,
-                          py: 2,
-                          '&:hover': {
-                            backgroundColor: 'rgba(255, 255, 255, 0.05)',
-                            borderRadius: 1
-                          }
-                        }}
-                      >
-                        <ListItemAvatar>
-                          <Avatar
-                            sx={{
-                              backgroundColor: activity.type === 'success' ? '#10b98120' :
-                                              activity.type === 'warning' ? '#f59e0b20' : '#3b82f620',
-                              border: activity.type === 'success' ? '1px solid #10b98140' :
-                                      activity.type === 'warning' ? '1px solid #f59e0b40' : '1px solid #3b82f640'
-                            }}
-                          >
-                            {activity.type === 'success' ? (
-                              <CheckCircleIcon sx={{ color: '#10b981', fontSize: 20 }} />
-                            ) : activity.type === 'warning' ? (
-                              <WarningIcon sx={{ color: '#f59e0b', fontSize: 20 }} />
-                            ) : (
-                              <AssignmentIcon sx={{ color: '#3b82f6', fontSize: 20 }} />
-                            )}
-                          </Avatar>
-                        </ListItemAvatar>
-                        <ListItemText
-                          primary={activity.title}
-                          secondary={activity.subtitle}
-                          primaryTypographyProps={{
-                            color: 'white',
-                            fontWeight: 500
-                          }}
-                          secondaryTypographyProps={{
-                            color: 'rgba(255, 255, 255, 0.7)'
-                          }}
-                        />
-                        <Typography variant="caption" color="rgba(255, 255, 255, 0.5)" sx={{ ml: 2 }}>
-                          <ScheduleIcon sx={{ fontSize: 14, mr: 0.5, verticalAlign: 'middle' }} />
-                          {activity.time}
-                        </Typography>
-                      </ListItem>
-                      {index < recentActivities.length - 1 && (
-                        <Divider sx={{ borderColor: 'rgba(255, 255, 255, 0.1)' }} />
-                      )}
-                    </motion.div>
-                  ))}
-                </List>
-              </CardContent>
-            </Card>
-          </Stack>
-        </motion.div>
-      </Container>
-    </Box>
-  )
-} 
\ No newline at end of file
+// Re-export do Dashboard modularizado
+export { Dashboard } from './Dashboard/Dashboard' 
\ No newline at end of file
diff --git a/src/providers/QueryProvider.tsx b/src/providers/QueryProvider.tsx
index 37c6ec0..49a9915 100644
--- a/src/providers/QueryProvider.tsx
+++ b/src/providers/QueryProvider.tsx
@@ -41,17 +41,10 @@ const QueryStatsProvider: React.FC<{
     logStats: () => {
       const cache = queryClient.getQueryCache()
       const mutations = queryClient.getMutationCache()
-      
-      const stats = {
-        queries: cache.getAll().length,
-        mutations: mutations.getAll().length,
-        isFetching: cache.getAll().filter(query => query.state.fetchStatus === 'fetching').length,
-        cacheSize: `${JSON.stringify(cache.getAll()).length} bytes`,
-      }
-      
-      if (import.meta.env.DEV) {
-        console.log('üìä [QueryStats] Estat√≠sticas do cache:', stats)
-      }
+      cache.getAll().length;
+      mutations.getAll().length;
+      cache.getAll().filter(query => query.state.fetchStatus === 'fetching').length;
+      `${JSON.stringify(cache.getAll()).length} bytes`;
     },
 
     clearAllCache: () => {
diff --git a/src/router.tsx b/src/router.tsx
index 5c3693b..1e33989 100644
--- a/src/router.tsx
+++ b/src/router.tsx
@@ -5,6 +5,8 @@ import { Register } from '@/pages/Register'
 import { Dashboard } from '@/pages/Dashboard'
 import { ForgotPasswordPage } from '@/pages/ForgotPassword/ForgotPasswordPage'
 import { ResetPasswordPage } from '@/pages/ResetPassword/ResetPasswordPage'
+import { VerifyEmailPage } from '@/pages/VerifyEmail'
+import { NotFoundPage } from '@/pages/NotFound'
 import { AuthGuard, GuestGuard } from '@/components/guards/AuthGuard'
 import { useAuthStore } from '@/stores/authStore'
 import { Route as rootRoute } from '@/routes/__root'
@@ -35,6 +37,12 @@ const GuestResetPassword = () => (
   </GuestGuard>
 )
 
+const GuestVerifyEmail = () => (
+  <GuestGuard>
+    <VerifyEmailPage />
+  </GuestGuard>
+)
+
 const loginRoute = createRoute({
   getParentRoute: () => rootRoute,
   path: '/login',
@@ -69,6 +77,17 @@ const resetPasswordRoute = createRoute({
   },
 })
 
+const verifyEmailRoute = createRoute({
+  getParentRoute: () => rootRoute,
+  path: '/auth/verified',
+  component: GuestVerifyEmail,
+  validateSearch: (search: Record<string, unknown>) => {
+    return {
+      token: (search.token as string) || '',
+    }
+  },
+})
+
 const indexRoute = createRoute({
   getParentRoute: () => rootRoute,
   path: '/',
@@ -131,12 +150,7 @@ const schoolsRoute = createRoute({
 const notFoundRoute = createRoute({
   getParentRoute: () => rootRoute,
   path: '/404',
-  component: () => (
-    <div>
-      <h1>P√°gina n√£o encontrada</h1>
-      <p>A p√°gina que voc√™ est√° procurando n√£o existe.</p>
-    </div>
-  ),
+  component: NotFoundPage,
 })
 
 const routeTree = rootRoute.addChildren([
@@ -145,6 +159,7 @@ const routeTree = rootRoute.addChildren([
   registerRoute,
   forgotPasswordRoute,
   resetPasswordRoute,
+  verifyEmailRoute,
   dashboardRoute,
   profileRoute,
   settingsRoute,
@@ -156,6 +171,7 @@ export const router = createRouter({
   routeTree,
   defaultPreload: 'intent',
   defaultPreloadStaleTime: 0,
+  defaultNotFoundComponent: NotFoundPage,
 })
 
 declare module '@tanstack/react-router' {}
\ No newline at end of file
diff --git a/src/services/authService.ts b/src/services/authService.ts
index 074aebe..06b06cd 100644
--- a/src/services/authService.ts
+++ b/src/services/authService.ts
@@ -83,6 +83,15 @@ export class AuthService {
     const response = await this.api.get<User>('/auth/me')
     return response.data
   }
+
+  /**
+   * Verificar email com token
+   */
+  async verifyEmail(token: string): Promise<void> {
+    await this.api.get('/auth/verify', {
+      params: { token }
+    })
+  }
 }
 
 /**
diff --git a/src/stores/authStore.ts b/src/stores/authStore.ts
index 38ffd45..5adacb3 100644
--- a/src/stores/authStore.ts
+++ b/src/stores/authStore.ts
@@ -51,6 +51,7 @@ export const useAuthStore = create<AuthState>()(
                 await authApi.logout()
                 
               } catch (error) {
+                
               } finally {
                 setAuthToken(null)
                 set((state) => {
@@ -156,9 +157,15 @@ export const useAuthStore = create<AuthState>()(
         storage: createJSONStorage(() => localStorage),
         partialize: (state) => ({
           user: state.user,
+          accessToken: state.accessToken,
           isAuthenticated: state.isAuthenticated,
           isInitialized: state.isInitialized,
         }),
+        onRehydrateStorage: () => (state) => {
+          if (state?.accessToken) {
+            setAuthToken(state.accessToken)
+          }
+        },
       }
     ),
     {
diff --git a/src/stores/utils.ts b/src/stores/utils.ts
index 2cb0446..c6de40f 100644
--- a/src/stores/utils.ts
+++ b/src/stores/utils.ts
@@ -1,15 +1,10 @@
 import { ApiError } from '@/lib/api-client'
 
-/**
- * Helper para gerenciar estado de loading e erro de forma consistente
- * Elimina a repeti√ß√£o de c√≥digo nas actions do store
- */
 export const runWithLoading = <T extends { isLoading: boolean; error: string | null }>(
   setState: (updater: (state: T) => void) => void
 ) => {
   return async <R>(fn: () => Promise<R>): Promise<R> => {
     try {
-      // Inicia loading e limpa erro
       setState((state) => {
         state.isLoading = true
         state.error = null
@@ -17,14 +12,12 @@ export const runWithLoading = <T extends { isLoading: boolean; error: string | n
 
       const result = await fn()
 
-      // Sucesso: remove loading
       setState((state) => {
         state.isLoading = false
       })
 
       return result
     } catch (error) {
-      // Erro: remove loading e define erro
       const apiError = error as ApiError
       setState((state) => {
         state.isLoading = false
@@ -34,44 +27,4 @@ export const runWithLoading = <T extends { isLoading: boolean; error: string | n
       throw error
     }
   }
-}
-
-/**
- * Fun√ß√£o para criar selectors com tipos autom√°ticos
- * Reduz duplica√ß√£o nos hooks do store
- */
-export function createSelector<T, K extends keyof T>(
-  useStore: (selector: (state: T) => T[K]) => T[K],
-  key: K
-) {
-  return () => useStore((state) => state[key])
-}
-
-/**
- * Logs condicionais apenas em desenvolvimento
- */
-export const log = {
-  info: (_message: string, ..._args: any[]) => {
-    if (import.meta.env.DEV) {
-      // Development logging - informational
-    }
-  },
-  
-  success: (_message: string, ..._args: any[]) => {
-    if (import.meta.env.DEV) {
-      // Success - operation completed
-    }
-  },
-  
-  warn: (message: string, ...args: any[]) => {
-    if (import.meta.env.DEV) {
-      console.warn(`‚ö†Ô∏è ${message}`, ...args)
-    }
-  },
-  
-  error: (message: string, ...args: any[]) => {
-    if (import.meta.env.DEV) {
-      console.error(`‚ùå ${message}`, ...args)
-    }
-  }
-} 
\ No newline at end of file
+}
\ No newline at end of file
diff --git a/vite.config.ts b/vite.config.ts
index ba01c91..941ed36 100644
--- a/vite.config.ts
+++ b/vite.config.ts
@@ -3,6 +3,7 @@ import react from '@vitejs/plugin-react'
 import { resolve } from 'path'
 
 // https://vitejs.dev/config/
+// @ts-ignore
 export default defineConfig({
   plugins: [
     react({
@@ -51,6 +52,7 @@ export default defineConfig({
   },
   server: {
     port: 3000,
+    strictPort: true,
     hmr: {
       overlay: true
     }
