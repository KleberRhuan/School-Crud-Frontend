name: 'Code Quality & Refactoring Checks'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-format:
    name: 'Lint & Format Check'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run ESLint
        run: pnpm lint
        
      - name: Check Prettier formatting
        run: pnpm format:check
        
      - name: TypeScript type check
        run: pnpm type-check

  test-coverage:
    name: 'Tests & Coverage'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run tests with coverage
        run: pnpm test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Coverage Gate
        run: |
          COVERAGE=$(grep -o "Lines.*: [0-9.]*%" coverage/lcov-report/index.html | grep -o "[0-9.]*" | head -1)
          echo "Current coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 85" | bc -l) )); then
            echo "‚ùå Coverage ${COVERAGE}% is below 85% threshold"
            exit 1
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets the 85% threshold"
          fi

  complexity-analysis:
    name: 'Complexity Analysis'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install complexity analysis tools
        run: pnpm add -D complexity-report sloc
        
      - name: Generate complexity report
        run: |
          npx complexity-report --output complexity-report.json --format json src/
          npx sloc --format json src/ > sloc-report.json
          
      - name: Analyze complexity
        run: |
          echo "=== Complexity Analysis ==="
          node -e "
            const fs = require('fs');
            const complexity = JSON.parse(fs.readFileSync('complexity-report.json', 'utf8'));
            const sloc = JSON.parse(fs.readFileSync('sloc-report.json', 'utf8'));
            
            console.log('üìä M√©tricas de C√≥digo:');
            console.log('- Total de linhas:', sloc.total);
            console.log('- Linhas de c√≥digo:', sloc.sloc);
            console.log('- Complexidade m√©dia:', complexity.summary.average.cyclomatic.toFixed(2));
            
            const highComplexityFunctions = complexity.functions.filter(f => f.cyclomatic > 10);
            if (highComplexityFunctions.length > 0) {
              console.log('‚ö†Ô∏è Fun√ß√µes com alta complexidade (>10):');
              highComplexityFunctions.forEach(f => {
                console.log(\`  - \${f.name}: \${f.cyclomatic}\`);
              });
              if (highComplexityFunctions.length > 5) {
                console.log('‚ùå Muitas fun√ß√µes com alta complexidade');
                process.exit(1);
              }
            }
            
            console.log('‚úÖ An√°lise de complexidade conclu√≠da');
          "

  build-check:
    name: 'Build Check'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build project
        run: pnpm build
        
      - name: Check bundle size
        run: |
          BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          
          # Verificar se o bundle n√£o est√° muito grande
          SIZE_BYTES=$(du -sb dist/ | cut -f1)
          MAX_SIZE_BYTES=$((10 * 1024 * 1024)) # 10MB
          
          if [ $SIZE_BYTES -gt $MAX_SIZE_BYTES ]; then
            echo "‚ùå Bundle size ($BUNDLE_SIZE) exceeds 10MB limit"
            exit 1
          else
            echo "‚úÖ Bundle size ($BUNDLE_SIZE) is within acceptable limits"
          fi

  security-audit:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Run security audit
        run: pnpm audit --audit-level moderate
        
      - name: Check for outdated dependencies
        run: |
          echo "üì¶ Verificando depend√™ncias desatualizadas..."
          pnpm outdated || echo "Algumas depend√™ncias est√£o desatualizadas"

  # Job de resumo que roda ap√≥s todos os outros
  quality-gate:
    name: 'Quality Gate'
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-coverage, complexity-analysis, build-check, security-audit]
    if: always()
    
    steps:
      - name: Check quality gate
        run: |
          echo "üéØ Resultados do Quality Gate:"
          echo "- Lint: ${{ needs.lint-and-format.result }}"
          echo "- Tests: ${{ needs.test-coverage.result }}"
          echo "- Complexity: ${{ needs.complexity-analysis.result }}"
          echo "- Build: ${{ needs.build-check.result }}"
          echo "- Security: ${{ needs.security-audit.result }}"
          
          if [[ "${{ needs.lint-and-format.result }}" == "failure" ]] || 
             [[ "${{ needs.test-coverage.result }}" == "failure" ]] || 
             [[ "${{ needs.complexity-analysis.result }}" == "failure" ]] || 
             [[ "${{ needs.build-check.result }}" == "failure" ]] || 
             [[ "${{ needs.security-audit.result }}" == "failure" ]]; then
            echo "‚ùå Quality gate failed!"
            exit 1
          else
            echo "‚úÖ Quality gate passed!"
          fi 